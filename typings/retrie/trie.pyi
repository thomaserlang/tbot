"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, Text

"""Submodule containing code to build a regex pattern from a trie of strings.

Standalone usage:
::

    from retrie.trie import Trie

    trie = Trie()

    trie.add("abc", "foo", "abs")
    assert trie.pattern() == "(?:ab[cs]|foo)"  # equivalent to but faster than "(?:abc|abs|foo)"

    trie.add("absolute")
    assert trie.pattern() == "(?:ab(?:c|s(?:olute)?)|foo)"

    trie.add("abx")
    assert trie.pattern() == "(?:ab(?:[cx]|s(?:olute)?)|foo)"

    trie.add("abxy")
    assert trie.pattern() == "(?:ab(?:c|s(?:olute)?|xy?)|foo)"

A :class:`Trie` may be populated with zero or more strings at instantiation or via :meth:`Trie.add`, from
which method chaining is possible. Two instances can be merged with the ``+`` (new instance) and
``+=`` (in-place update) operators. Instances will compare equal if their data dictionaries are equal.
::

    trie = Trie()
    trie += Trie("abc")
    assert (
        trie + Trie().add("foo")
        == Trie("abc", "foo")
        == Trie(*["abc", "foo"])
        == Trie().add(*["abc", "foo"])
        == Trie().add("abc", "foo")
        == Trie().add("abc").add("foo")
    )
"""
data_type = Dict[Text, Dict]
class Trie:
    """Create a Trie with zero or more words at instantiation or (later via :meth:`Trie.add`).

    The Trie can be exported to a Regex pattern via :meth:`Trie.pattern`, which should match
    much faster than a simple Regex union. For best performance, pass the pattern to :func:`re.compile`
    and cache it to avoid recompiling for every search. See also :attr:`retrie.retrie.Checklist.compiled`.

    Two instances can be merged with the ``+`` (new instance) and ``+=`` (in-place update) operators.
    Instances will compare equal if their data dictionaries are equal.

    Args:
        word (str): A string to add to the Trie.
    """
    __slots__ = ...
    def __init__(self, *word: Text) -> None:
        """Initialize data dictionary."""
        ...
    
    def __eq__(self, other: Any) -> bool:
        """Compare two Trie objects."""
        ...
    
    def __add__(self, other: Trie) -> Trie:
        """Merge two Trie objects."""
        ...
    
    def __iadd__(self, other: Trie) -> Trie:
        """Merge another Trie object into the current Trie."""
        ...
    
    def add(self, *word: Text) -> Trie:
        """Add one or more words to the current Trie.

        Args:
            word (str): A string to add to the Trie.
        """
        ...
    
    def dump(self) -> data_type:
        """Dump the current trie as dictionary."""
        ...
    
    def pattern(self) -> Text:
        """Dump the current trie as regex string."""
        ...
    


