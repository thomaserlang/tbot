{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/components/save_button.jsx","webpack:///./src/front.jsx","webpack:///./src/twitch/logviewer/userinput.jsx","webpack:///./src/twitch/logviewer/index.jsx","webpack:///./src/twitch/logviewer/suggestchannelinput.jsx","webpack:///./src/twitch/logviewer/selectchannel.jsx","webpack:///./src/twitch/public/commands.jsx","webpack:///./src/twitch/public/index.jsx","webpack:///./src/index.jsx","webpack:///./src/twitch/api.jsx","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./src/twitch/dashboard/components/select_channel.jsx","webpack:///./src/twitch/dashboard/components/sidebar.jsx","webpack:///./src/twitch/dashboard/components/topbar.jsx","webpack:///./src/twitch/dashboard/components/bot_controls.jsx","webpack:///./src/twitch/dashboard/components/extra_auth.jsx","webpack:///./src/twitch/dashboard/dashboard.jsx","webpack:///./src/twitch/dashboard/commands.jsx","webpack:///./src/twitch/dashboard/command.jsx","webpack:///./src/twitch/dashboard/spotify.jsx","webpack:///./src/twitch/dashboard/components/discord_connect.jsx","webpack:///./src/twitch/dashboard/components/discord_live_notification.jsx","webpack:///./src/twitch/dashboard/discord.jsx","webpack:///./src/twitch/dashboard/admins.jsx","webpack:///./src/twitch/dashboard/filters.jsx","webpack:///./src/twitch/dashboard/components/filter.jsx","webpack:///./src/twitch/dashboard/filter_link.jsx","webpack:///./src/twitch/dashboard/filter_paragraph.jsx","webpack:///./src/twitch/dashboard/filter_symbol.jsx","webpack:///./src/twitch/dashboard/filter_caps.jsx","webpack:///./src/twitch/dashboard/filter_emote.jsx","webpack:///./src/twitch/dashboard/filter_non_latin.jsx","webpack:///./src/twitch/dashboard/filter_action.jsx","webpack:///./src/twitch/dashboard/filter_banned_words_groups.jsx","webpack:///./src/twitch/dashboard/filter_banned_words.jsx","webpack:///./src/twitch/dashboard/timers.jsx","webpack:///./src/twitch/dashboard/timer.jsx","webpack:///./src/twitch/dashboard/chat_alerts.jsx","webpack:///./src/twitch/dashboard/points_settings.jsx","webpack:///./src/twitch/dashboard/gambling_slots_settings.jsx","webpack:///./src/twitch/dashboard/gambling_roulette_settings.jsx","webpack:///./src/twitch/dashboard/index.jsx","webpack:///./src/utils.jsx","webpack:///./src/components/loading.jsx","webpack:///./src/twitch/utils.jsx"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","props","isSaving","className","type","disabled","role","aria-hidden","savingText","isSaved","savedText","children","hasError","errorText","Front","id","tbot","to","React","Component","UserInput","state","users","defaultValue","fetchUsers","stateChange","e","target","api","this","channel_id","params","suggest_name","then","setState","Downshift","stateChangeTypes","clickItem","changeInput","selectedItem","inputValue","keyDownArrowUp","keyDownArrowDown","highlightedIndex","onStateChange","itemToString","item","getLabelProps","getInputProps","getItemProps","getToggleButtonProps","getMenuProps","isOpen","clearSelection","placeholder","onChange","map","index","style","backgroundColor","fontWeight","Logviewer","query","qs","parse","location","search","channel","loading","chatlog","loadBefore","loadAfter","match","setTitle","loadingChannel","loadChatlog","before_id","loadUserChatStats","user","message","show_mod_actions_only","unshift","showLoadAfter","headers","showLoadBefore","catch","response","status","accessDenied","preventDefault","after_id","userChatStats","text","colSpan","textAlign","class","href","onClick","width","dateTime","created_at","whiteSpace","iso8601toLocalTime","renderTypeSymbol","moment","format","chat_messages","timeouts","bans","title","streams","streams_row_peak","streams_row_peak_date","last_viewed_stream_date","renderAccessDenied","twitch_user","defaultChecked","htmlFor","renderUserStats","renderChatlog","SuggestChannelInput","channels","fetch","selected","SelectChannel","modOf","twitchLoginClick","requireAuth","isAuthed","renderModOf","renderLoginButton","Commands","commands","getCommands","document","managedUser","level","groups","cmd","includes","group_name","fontSize","group","userLevelName","user_level","Main","errors","getChannel","error","renderError","exact","path","component","prevProps","scrollTo","ReactDOM","render","TwitchLogViewerSelectChannel","TwitchLogviewer","TwitchPublic","TwitchDashboard","getElementById","axios","interceptors","use","next","encodeURIComponent","pathname","Promise","reject","webpackContext","req","webpackContextResolve","Error","code","keys","resolve","getChannels","tabIndex","margin","marginTop","borderRadius","data-dismiss","aria-label","onClose","Sidebar","showSelectChannel","activeClassName","selectChannelClick","renderPoints","renderConnect","BotControls","post","getSettings","delete","settings","active","joinClick","partClick","muted","muteClick","unmuteClick","chatlog_enabled","enableChatlogClick","disableChatlogClick","ExtraAuth","getData","has_extra_auth","Dashboard","setHeader","global_cooldown","user_cooldown","enabledWhenName","enabled_status","enabled","Command","val","checked","saving","put","success","confirm","deleting","templates","JSON","stringify","mod_cooldown","public","getCommand","getTemplates","handleDelete","handleTemplate","label","temp","maxWidth","renderTemplates","onSubmit","handleSubmit","handleEvent","autoFocus","required","renderButton","renderDeleteButton","Spotify","connecting","spotify","getStatus","connected","method","action","DiscordConnect","discord","saved","webhook_url","Discord","Admins","newAdmin","getAdmins","alert","admin","admins","levels","handleNewSubmit","handleNewEvent","renderNewAdmin","handleChangeLevel","Filters","filters","getFilters","f","desc","Filter","filter","exclude_user_level","warning_enabled","warning_message","warning_expire","timeout_message","timeout_duration","Filter_link","Array","isArray","whitelist","split","join","submit","rows","renderBase","Filter_symbol","max_length","max_symbols","Filter_caps","min_length","max_percent","Filter_emote","max_emotes","Filter_non_latin","Filter_action","Filter_banned_words_groups","idx","Filter_banned_words","banned_words","filter_id","console","log","testResult","dataset","changed_banned_words","removeBannedWords","testing","elements","redirect_back","getFilter","handleTest","handleTestChange","savingTest","bw","data-id","handleBannedWordsChange","handleSaveBannedWords","handleDeleteBannedWords","handleAdd","renderTest","renderBannedWords","Timers","timers","getTimers","timer","interval","Timer","messages","send_message_order","getTimer","ChatAlerts","alerts","forceUpdate","alertTypes","minAmount","canAdd","vars","getAlerts","alertType","min_amount","handleChange","data-type","renderType","PointsSettings","ignore_users","points_name","points_per_min","points_per_min_sub_multiplier","points_per_sub","points_per_cheer","GamblingSlots","emotes","emote_pool_size","payout_percent","min_bet","max_bet","win_message","allin_win_message","lose_message","allin_lose_message","GamblingRoulette","win_chance","Filter_paragraph","GamblingSlotsSettings","GamblingRouletteSettings","innerHTML","field","height"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([169,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export default(props) => {\n    if (props.isSaving)\n        return <button className=\"btn btn-primary\" type=\"button\" disabled>\n                <span \n                    className=\"spinner-border spinner-border-sm\" \n                    role=\"status\" \n                    aria-hidden=\"true\">\n                </span> {props.savingText?props.savingText:'Saving...'}\n            </button>\n    if (props.isSaved)\n        return <button type=\"submit\" className=\"btn btn-success\">\n            {props.savedText?props.savedText:props.children}\n        </button>\n    if (props.hasError)\n        return <button type=\"submit\" className=\"btn btn-danger\">\n            {props.errorText?props.errorText:props.children}\n        </button>\n\n    return <button type=\"submit\" className=\"btn btn-primary\">{props.children}</button>\n}","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport './front.scss'\n\nclass Front extends React.Component {\n\n    render() {\n        return <div id=\"front\">\n            <div className=\"title\">{tbot.name}</div>\n            <div className=\"items\">\n                <div className=\"title\">\n                    Twitch\n                </div>\n                <Link to=\"/twitch/dashboard\" className=\"item twitch\">                    \n                    Dashboard\n                </Link>\n                <Link to=\"/twitch/logviewer\" className=\"item twitch\">\n                    Logviewer\n                </Link>\n            </div>\n            <div className=\"items\">\n                <div className=\"title\">\n                    Discord\n                </div>\n                <a className=\"item discord\">\n                    Dashboard\n                </a>\n                <a className=\"item discord\">\n                    Logviewer\n                </a>\n            </div>\n        </div>\n    }\n}\n\nexport default Front","import React from 'react'\nimport Downshift from 'downshift'\nimport api from 'tbot/twitch/api'\n\nimport './suggestinput.scss'\n\nclass UserInput extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            users: [],\n            value: this.props.defaultValue,\n        }\n        this.fetchUsers = this.fetchUsers.bind(this)\n        this.stateChange = this.stateChange.bind(this)\n    }\n\n    fetchUsers(e) {\n        if (!e.target.value) {\n            this.setState({users: []})\n            return\n        }\n        api.get(`/api/twitch/channels/${this.props.channel_id}/users`, {params:{suggest_name: e.target.value}}).then(r => {\n            this.setState({\n                users: r.data, \n            })\n        })\n    }\n\n    stateChange(e) {\n        switch (e.type) {\n            case Downshift.stateChangeTypes.clickItem:\n            case Downshift.stateChangeTypes.changeInput:\n                this.setState({value: (e.selectedItem?e.selectedItem.name:e.inputValue)})\n            break\n            case Downshift.stateChangeTypes.keyDownArrowUp:\n            case Downshift.stateChangeTypes.keyDownArrowDown:\n                this.setState({value: (this.state.users[e.highlightedIndex].name)})\n            break\n        }     \n    }\n      \n    render() {\n        return (<Downshift \n                inputValue={this.state.value}\n                onStateChange={this.stateChange}\n                itemToString={item => (item ? item.name : '')}\n            >\n            {({ \n                getLabelProps,\n                getInputProps,\n                getToggleButtonProps,\n                getMenuProps,\n                getItemProps,\n                isOpen,\n                clearSelection,\n                selectedItem,\n                inputValue,\n                highlightedIndex,\n            }) => (\n                <div className=\"suggest-input\">\n                    <input {...getInputProps({\n                        name: 'user',\n                        placeholder: 'User',\n                        onChange: this.fetchUsers,\n                        className: 'form-control',\n                    })} />\n                    {isOpen && (this.state.users.length>0) ? (\n                        <div className=\"suggest-container\">{\n                            this.state.users.map((item, index) => (\n                                <div\n                                    className=\"suggest-item\"\n                                    {...getItemProps({ key: index, index, item })}\n                                    style={{\n                                        backgroundColor: highlightedIndex === index ? '#505258' : '#43464F',\n                                        fontWeight: selectedItem === item ? 'bold' : 'normal',\n                                    }}\n                                >\n                                    {item.name}\n                                </div>\n                            ))\n                        }</div>\n                    ) : null}\n                </div>\n            )}\n        </Downshift>)\n    }\n}\n\nexport default UserInput","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport api from 'tbot/twitch/api'\nimport qs from 'query-string'\nimport moment from 'moment'\nimport {setTitle} from 'tbot/utils'\nimport Loading from 'tbot/components/loading'\nimport UserInput from './userinput'\nimport './logviewer.scss'\nimport '../dashboard/components/topbar.scss'\n\nclass Logviewer extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.query = qs.parse(location.search)\n        this.state = {\n            channel: null,\n            loading: true,\n            chatlog: [],\n            loading: true,\n            loadingChannel: true,\n            userChatStats: null,\n            showLoadBefore: false,\n            showLoadAfter: true,\n            accessDenied: false,\n        }\n        this.loadBefore = this.loadBefore.bind(this);\n        this.loadAfter = this.loadAfter.bind(this);\n    }\n\n    componentDidMount() {\n        let channel = this.props.match.params.channel;\n        setTitle(`${channel} | Twitch Logviewer`)\n        api.get(`/api/twitch/channels`, {params: {name:channel}}).then(data => {\n            this.setState({\n                channel: data.data[0],\n                loadingChannel: false,\n            }, state => {\n                this.loadChatlog({\n                    before_id: this.query.before_id,\n                })\n                this.loadUserChatStats()\n            })\n        })\n    }\n\n    loadChatlog(params) {\n        this.setState({loading: true})\n        params['user'] = this.query.user\n        params['message'] = this.query.message\n        params['show_mod_actions_only'] = this.query.show_mod_actions_only\n        api.get(`/api/twitch/channels/${this.state.channel.id}/chatlog`, {params: params}).then(r => {\n            let l = this.state.chatlog;\n            if ('after_id' in params)                \n                l.push(...r.data)\n            else\n                l.unshift(...r.data);\n            if ('after_id' in params) {\n                this.state.showLoadAfter = r.data.length == r.headers['x-per-page']\n            } else {\n                this.state.showLoadBefore = r.data.length == r.headers['x-per-page'] \n                if (this.state.showLoadAfter != false) {\n                    this.state.showLoadAfter = (this.query.before_id);\n                }\n            }\n            this.setState({\n                loading: false,\n                chatlog: l,\n            })\n        }).catch(e => {\n            if (e.response.status == 403) {\n                this.setState({\n                    accessDenied: true,\n                })\n            }\n        })\n    }\n\n    loadBefore(e) {\n        e.preventDefault();\n        this.loadChatlog({\n            before_id: this.state.chatlog[0].id,\n        })\n    }\n\n    loadAfter(e) {\n        e.preventDefault();\n        this.loadChatlog({\n            after_id: this.state.chatlog[this.state.chatlog.length-1].id,\n        })\n    }\n\n    loadUserChatStats() {\n        this.setState({\n            userChatStats: null,\n            loading: true,\n        })\n        if (!this.query.user)\n            return\n        api.get(`/api/twitch/channels/${this.state.channel.id}/user-chatstats`, {params: {\n            user: this.query.user,\n        }}).then(r => {\n            this.setState({\n                userChatStats: r.data,\n                loading: false,\n            })\n        })   \n    }\n\n    renderChatlog() {\n        if (this.state.chatlog.length == 0)\n            if (this.state.loading)\n                return <Loading text=\"LOADING\" />\n            else\n                return <div className=\"m-2\"><center>No results found</center></div>\n        return <table className=\"chatlog table table-dark table-striped table-sm table-hover\">\n            <tbody>\n                {this.state.showLoadBefore?\n                    <tr><td colSpan=\"3\" style={{textAlign: 'center'}}>\n                        {this.state.loading?\n                            <div class=\"spinner-grow text-primary\" role=\"status\"></div>:\n                            <a href=\"#\" onClick={this.loadBefore}>Load more</a>}\n                        </td></tr>\n                : null}\n                {this.state.chatlog.map(l => (\n                    <tr key={l.id}>\n                        <td \n                            width=\"10px\"\n                            dateTime={l.created_at}\n                            style={{whiteSpace:'nowrap'}}\n                        >\n                            <a href={`?before_id=${l.id+1}`}>{this.iso8601toLocalTime(l.created_at)}</a>\n                        </td>\n                        <td width=\"10px\"><a href={`?user=${l.user}`}>{l.user}</a></td>\n                        <td>\n                            {this.renderTypeSymbol(l)}\n                            {l.message} \n                        </td>\n                    </tr>\n                ))}                \n                {this.state.showLoadAfter?\n                    <tr><td colSpan=\"3\" style={{textAlign: 'center'}}>\n                        {this.state.loading?\n                            <div class=\"spinner-grow text-primary\" role=\"status\"></div>:\n                            <a href=\"#\" onClick={this.loadAfter}>Load more</a>}\n                        </td></tr>\n                : null}\n            </tbody>\n        </table>\n    }\n\n    renderTypeSymbol(l) {\n        switch(l.type) {\n            case 2:\n                return <span className=\"badge badge-danger\">B</span>\n                break;\n            case 3:\n                return <span className=\"badge badge-warning\">T</span> \n                break;\n            case 4:\n                return <span className=\"badge badge-info\">P</span> \n                break;\n            case 100:\n                return <span className=\"badge badge-success\">M</span> \n                break;\n            default:\n                return null\n                break;\n        }\n    }\n\n    iso8601toLocalTime(t) {\n        let date = moment(t);\n        return date.format('YYYY-MM-DD HH:mm:ss')\n    }\n\n    renderUserStats() {\n        if (this.state.userChatStats == null)\n            return null\n\n        return <div className=\"userChatStats\">\n            <span><b>Total messages:</b> {this.state.userChatStats.chat_messages||0}</span>\n            <span><b>Timeouts:</b> {this.state.userChatStats.timeouts||0}</span>\n            <span><b>Bans:</b> {this.state.userChatStats.bans||0}</span>\n            <span title=\"Number of watched streams\"><b>Streams:</b> {this.state.userChatStats.streams||0}</span>\n            <span title=\"Peak streams in a row\"><b>Streams peak:</b> {this.state.userChatStats.streams_row_peak||0} ({this.state.userChatStats.streams_row_peak_date||'No data'})</span>\n            <span title=\"Date of the latest stream watched\"><b>Last stream:</b> {this.state.userChatStats.last_viewed_stream_date||'No data'}</span>\n        </div>\n\n    }\n\n    renderAccessDenied() {\n        return <div className=\"access-denied\">\n            Sorry,\n            <br />\n            you must be a moderator to view the chatlog of this channel\n        </div>\n    }\n\n    render() {\n        if (this.state.loadingChannel)\n            return <Loading text=\"LOADING\" />\n        if (this.state.accessDenied)\n            return this.renderAccessDenied()\n        return <div id=\"logviewer\">\n            <div id=\"topbar\" style={{'border': 'none', 'borderBottom': '1px solid #000', 'paddingLeft': '0.5rem'}}>\n                <div className=\"title\" id=\"top-title\">\n                    <Link to=\"/twitch/logviewer\" className=\"text-white\">\n                        <i className=\"material-icons material-inline \">arrow_back</i></Link> Logviewer for {this.state.channel.name}\n                </div>\n                {tbot.twitch_user?\n                <div className=\"signed-as\">Signed in as <b>{tbot.twitch_user.user}</b>, <a href=\"/twitch/logout\">log out</a></div>\n                :null}\n            </div>\n            <div className=\"sticky-top\">\n                <div className=\"filter\">\n                    <form className=\"form-inline\">\n                        <UserInput defaultValue={this.query.user} channel_id={this.state.channel.id} />\n                        <input \n                            name=\"message\" \n                            type=\"text\" \n                            className=\"form-control\" \n                            placeholder=\"Message\"\n                            defaultValue={this.query.message}\n                        />\n                        <button type=\"submit\" className=\"btn btn-warning\">Search</button>\n                        <input \n                            type=\"checkbox\" \n                            value=\"yes\" \n                            name=\"show_mod_actions_only\" \n                            className=\"form-check-input\" \n                            id=\"show_mod_actions_only\" \n                            defaultChecked={this.query.show_mod_actions_only=='yes'}\n                        />\n                        <label className=\"form-check-label\" htmlFor=\"show_mod_actions_only\">Show only mod actions</label>\n                    </form>\n                </div>\n                {this.renderUserStats()}\n            </div>\n            {this.renderChatlog()}\n        </div>;\n    }\n\n}\n\nexport default Logviewer","import React from 'react'\nimport Downshift from 'downshift'\nimport api from 'tbot/twitch/api'\n\nimport './suggestinput.scss'\n\nclass SuggestChannelInput extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            channels: [],\n        }\n        this.fetch = this.fetch.bind(this)\n        this.selected = this.selected.bind(this)\n    }\n\n    fetch(e) {\n        if (!e.target.value) {\n            this.setState({channels: []})\n            return\n        }\n        api.get(`/api/twitch/channels`, {params:{suggest_name: e.target.value}}).then(r => {\n            this.setState({\n                channels: r.data, \n            })\n        })\n    }\n\n    selected(s) {\n        location.href = '/twitch/logviewer/'+s.name\n    }\n\n    render() {\n        return (<Downshift \n                itemToString={item => (item ? item.name : '')}\n                onChange={this.selected}\n            >\n            {({ \n                getLabelProps,\n                getInputProps,\n                getToggleButtonProps,\n                getMenuProps,\n                getItemProps,\n                isOpen,\n                clearSelection,\n                selectedItem,\n                inputValue,\n                highlightedIndex,\n            }) => (\n                <div className=\"suggest-input\">\n                    <input {...getInputProps({\n                        name: 'channel',\n                        placeholder: 'Channel search',\n                        onChange: this.fetch,\n                        className: 'form-control',\n                    })} />\n                    {isOpen && (this.state.channels.length>0) ? (\n                        <div className=\"suggest-container\">{\n                            this.state.channels.map((item, index) => (\n                                <div\n                                    className=\"suggest-item\"\n                                    {...getItemProps({ key: index, index, item })}\n                                    style={{\n                                        backgroundColor: highlightedIndex === index ? '#505258' : '#43464F',\n                                        fontWeight: selectedItem === item ? 'bold' : 'normal',\n                                    }}\n                                >\n                                    {item.name}\n                                </div>\n                            ))\n                        }</div>\n                    ) : null}\n                </div>\n            )}\n        </Downshift>)\n    }\n}\n\nexport default SuggestChannelInput","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport api from 'tbot/twitch/api'\nimport {isAuthed, requireAuth} from 'tbot/twitch/utils'\nimport {setTitle} from 'tbot/utils'\n\nimport SuggestChannelInput from './suggestchannelinput'\n\nclass SelectChannel extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            modOf: [],\n        }\n        setTitle('Twitch Logviewer')\n        this.twitchLoginClick = this.twitchLoginClick.bind(this);\n    }\n\n    twitchLoginClick() {\n        requireAuth();\n    }\n\n    componentDidMount() {\n        api.get('/api/twitch/user/mod-of').then(r => {\n            this.setState({\n                modOf: r.data,\n            })\n        })\n    }\n\n    renderModOf() {\n        if (!isAuthed())\n            return null;\n        return (\n            <div className=\"mod-of\">\n                {this.state.modOf.map(c => (\n                    <div key={c.id}>\n                        <Link to={`/twitch/logviewer/${c.name}`}>\n                            {c.name}\n                        </Link>\n                    </div>\n                ))}\n            </div>\n        )\n    }\n\n    renderLoginButton() {\n        if (isAuthed())\n            return null;\n        return (\n            <center>\n                <button className=\"btn btn-primary\" onClick={this.twitchLoginClick}>Login with Twitch</button>\n            </center>\n        )\n    }\n\n    render() {\n        return <div id=\"select-channels\">\n            <div className=\"text-center\">\n                <Link to=\"/\">{tbot.name}</Link>\n            </div>\n            <h1>Twitch Logviewer</h1>\n            <div className=\"suggest-channel\">\n                <SuggestChannelInput />\n            </div>\n            {this.renderModOf()}\n            {this.renderLoginButton()}            \n        </div>\n    }\n}\n\nexport default SelectChannel;","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport api from 'tbot/twitch/api'\nimport Loading from 'tbot/components/loading'\n\nclass Commands extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            commands: [],\n            loading: true,\n        }\n    }\n\n    componentDidMount() {\n        this.getCommands()\n        document.title = `${managedUser.name} - Commands | ${tbot.name}`\n    }\n\n    getCommands() {        \n        api.get(`/api/twitch/channels/${managedUser.id}/commands-public`).then(r => {\n            this.setState({\n                commands: r.data, \n                loading: false\n            })\n        })\n    }\n\n    userLevelName(level) {\n        switch (level) {\n            case 0:\n                return ''\n                break;\n            case 1:\n                return 'Subs'\n                break;\n            case 2:\n                return 'VIPs'\n                break;\n            case 7:\n                return 'Mods'\n                break;\n            case 8:\n                return 'Admins'\n                break;\n            case 9:\n                return 'Boradcaster'\n                break;\n        }\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading />\n        let groups = []\n        for (let cmd of this.state.commands) {\n            if (!groups.includes(cmd.group_name))\n                groups.push(cmd.group_name)\n        }\n        let i = 0\n        return  <div> \n            <div className=\"header mt-4\">\n                <h1 style={{fontSize:'26px'}}>{managedUser.name} - Commands</h1>\n            </div>\n            {groups.map(group => {\n                i++\n                return <div key={'group'+i} className=\"mt-4\">\n                    <h4>{group}</h4>\n                    <table className=\"table table-dark\">\n                        <tbody>\n                            {this.state.commands.map(cmd => {\n                                if (cmd.group_name != group)\n                                    return null\n                                return <tr key={cmd.id}>\n                                    <td width=\"200px\">!{cmd.cmd}</td>\n                                    <td>{cmd.response}</td>\n                                    <td style={{'textAlign': 'right'}}>{this.userLevelName(cmd.user_level)}</td>\n                                </tr>\n                            })}\n                        </tbody>\n                    </table>\n                </div>\n            })}\n        </div>\n    }\n}\n\nexport default Commands","import React from 'react'\nimport {Route, Redirect} from \"react-router-dom\"\nimport {renderError} from 'tbot/utils'\nimport api from 'tbot/twitch/api'\nimport Loading from 'tbot/components/loading'\nimport Commands from './commands'\n\nclass Main extends React.Component {\n\n    render() {\n        if (this.state.loading) {\n            this.getChannel()\n            return <Loading text=\"LOADING\" />\n        }\n        if (this.state.error) {\n            return <div className=\"mt-5 ml-auto mr-auto\" style={{width: '600px'}}>\n                {renderError(this.state.error)}\n            </div>\n        }\n        return <div className=\"container\">\n            <Route exact path='/t/:channel/commands' component={Commands}/>\n        </div>\n    }\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            loading: true,\n            errors: null,\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.location !== prevProps.location) {\n            window.scrollTo(0, 0)\n        }\n    }\n\n    getChannel() {\n        window.managedUser = null\n        api.get(`/api/twitch/channel/${this.props.match.params.channel}`).then(r => {\n            window.managedUser = r.data\n            this.setState({loading: false})\n        }).catch(e => {\n            this.setState({loading: false, error: e.response.data})\n        })\n    }\n\n}\n\nexport default Main","import ReactDOM from 'react-dom';\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\";\n\nimport Front from 'tbot/front'\n\nimport TwitchLogviewer from 'tbot/twitch/logviewer';\nimport TwitchLogViewerSelectChannel from 'tbot/twitch/logviewer/selectchannel';\n\nimport TwitchDashboard from 'tbot/twitch/dashboard'\n\nimport TwitchPublic from 'tbot/twitch/public'\n\nimport './index.scss';\n\nReactDOM.render((\n    <BrowserRouter>\n        <Switch>\n            <Route exact path='/' component={Front}/>\n\n            <Route exact path='/twitch/logviewer' component={TwitchLogViewerSelectChannel}/>\n            <Route exact path='/twitch/logviewer/:channel' component={TwitchLogviewer}/>\n\n            <Route path='/t/:channel' component={TwitchPublic}/>\n            \n            <Route path='/twitch/dashboard' component={TwitchDashboard}/>\n            <Route path='/twitch/:channel' component={TwitchDashboard}/>\n        </Switch>\n    </BrowserRouter>\n), document.getElementById('root'));","import axios from 'axios';\n\naxios.interceptors.response.use(function(response) {\n    return response;\n}, function (error) {\n    if (error.response.status == 401) {\n        let next = encodeURIComponent(\n            location.pathname + location.search\n        )\n        location.href = '/twitch/login?next='+next;\n        throw 'Not authenticated!';\n    }\n    return Promise.reject(error);\n});\n\nexport default axios;","var map = {\n\t\"./af\": 33,\n\t\"./af.js\": 33,\n\t\"./ar\": 34,\n\t\"./ar-dz\": 35,\n\t\"./ar-dz.js\": 35,\n\t\"./ar-kw\": 36,\n\t\"./ar-kw.js\": 36,\n\t\"./ar-ly\": 37,\n\t\"./ar-ly.js\": 37,\n\t\"./ar-ma\": 38,\n\t\"./ar-ma.js\": 38,\n\t\"./ar-sa\": 39,\n\t\"./ar-sa.js\": 39,\n\t\"./ar-tn\": 40,\n\t\"./ar-tn.js\": 40,\n\t\"./ar.js\": 34,\n\t\"./az\": 41,\n\t\"./az.js\": 41,\n\t\"./be\": 42,\n\t\"./be.js\": 42,\n\t\"./bg\": 43,\n\t\"./bg.js\": 43,\n\t\"./bm\": 44,\n\t\"./bm.js\": 44,\n\t\"./bn\": 45,\n\t\"./bn.js\": 45,\n\t\"./bo\": 46,\n\t\"./bo.js\": 46,\n\t\"./br\": 47,\n\t\"./br.js\": 47,\n\t\"./bs\": 48,\n\t\"./bs.js\": 48,\n\t\"./ca\": 49,\n\t\"./ca.js\": 49,\n\t\"./cs\": 50,\n\t\"./cs.js\": 50,\n\t\"./cv\": 51,\n\t\"./cv.js\": 51,\n\t\"./cy\": 52,\n\t\"./cy.js\": 52,\n\t\"./da\": 53,\n\t\"./da.js\": 53,\n\t\"./de\": 54,\n\t\"./de-at\": 55,\n\t\"./de-at.js\": 55,\n\t\"./de-ch\": 56,\n\t\"./de-ch.js\": 56,\n\t\"./de.js\": 54,\n\t\"./dv\": 57,\n\t\"./dv.js\": 57,\n\t\"./el\": 58,\n\t\"./el.js\": 58,\n\t\"./en-SG\": 59,\n\t\"./en-SG.js\": 59,\n\t\"./en-au\": 60,\n\t\"./en-au.js\": 60,\n\t\"./en-ca\": 61,\n\t\"./en-ca.js\": 61,\n\t\"./en-gb\": 62,\n\t\"./en-gb.js\": 62,\n\t\"./en-ie\": 63,\n\t\"./en-ie.js\": 63,\n\t\"./en-il\": 64,\n\t\"./en-il.js\": 64,\n\t\"./en-nz\": 65,\n\t\"./en-nz.js\": 65,\n\t\"./eo\": 66,\n\t\"./eo.js\": 66,\n\t\"./es\": 67,\n\t\"./es-do\": 68,\n\t\"./es-do.js\": 68,\n\t\"./es-us\": 69,\n\t\"./es-us.js\": 69,\n\t\"./es.js\": 67,\n\t\"./et\": 70,\n\t\"./et.js\": 70,\n\t\"./eu\": 71,\n\t\"./eu.js\": 71,\n\t\"./fa\": 72,\n\t\"./fa.js\": 72,\n\t\"./fi\": 73,\n\t\"./fi.js\": 73,\n\t\"./fo\": 74,\n\t\"./fo.js\": 74,\n\t\"./fr\": 75,\n\t\"./fr-ca\": 76,\n\t\"./fr-ca.js\": 76,\n\t\"./fr-ch\": 77,\n\t\"./fr-ch.js\": 77,\n\t\"./fr.js\": 75,\n\t\"./fy\": 78,\n\t\"./fy.js\": 78,\n\t\"./ga\": 79,\n\t\"./ga.js\": 79,\n\t\"./gd\": 80,\n\t\"./gd.js\": 80,\n\t\"./gl\": 81,\n\t\"./gl.js\": 81,\n\t\"./gom-latn\": 82,\n\t\"./gom-latn.js\": 82,\n\t\"./gu\": 83,\n\t\"./gu.js\": 83,\n\t\"./he\": 84,\n\t\"./he.js\": 84,\n\t\"./hi\": 85,\n\t\"./hi.js\": 85,\n\t\"./hr\": 86,\n\t\"./hr.js\": 86,\n\t\"./hu\": 87,\n\t\"./hu.js\": 87,\n\t\"./hy-am\": 88,\n\t\"./hy-am.js\": 88,\n\t\"./id\": 89,\n\t\"./id.js\": 89,\n\t\"./is\": 90,\n\t\"./is.js\": 90,\n\t\"./it\": 91,\n\t\"./it-ch\": 92,\n\t\"./it-ch.js\": 92,\n\t\"./it.js\": 91,\n\t\"./ja\": 93,\n\t\"./ja.js\": 93,\n\t\"./jv\": 94,\n\t\"./jv.js\": 94,\n\t\"./ka\": 95,\n\t\"./ka.js\": 95,\n\t\"./kk\": 96,\n\t\"./kk.js\": 96,\n\t\"./km\": 97,\n\t\"./km.js\": 97,\n\t\"./kn\": 98,\n\t\"./kn.js\": 98,\n\t\"./ko\": 99,\n\t\"./ko.js\": 99,\n\t\"./ku\": 100,\n\t\"./ku.js\": 100,\n\t\"./ky\": 101,\n\t\"./ky.js\": 101,\n\t\"./lb\": 102,\n\t\"./lb.js\": 102,\n\t\"./lo\": 103,\n\t\"./lo.js\": 103,\n\t\"./lt\": 104,\n\t\"./lt.js\": 104,\n\t\"./lv\": 105,\n\t\"./lv.js\": 105,\n\t\"./me\": 106,\n\t\"./me.js\": 106,\n\t\"./mi\": 107,\n\t\"./mi.js\": 107,\n\t\"./mk\": 108,\n\t\"./mk.js\": 108,\n\t\"./ml\": 109,\n\t\"./ml.js\": 109,\n\t\"./mn\": 110,\n\t\"./mn.js\": 110,\n\t\"./mr\": 111,\n\t\"./mr.js\": 111,\n\t\"./ms\": 112,\n\t\"./ms-my\": 113,\n\t\"./ms-my.js\": 113,\n\t\"./ms.js\": 112,\n\t\"./mt\": 114,\n\t\"./mt.js\": 114,\n\t\"./my\": 115,\n\t\"./my.js\": 115,\n\t\"./nb\": 116,\n\t\"./nb.js\": 116,\n\t\"./ne\": 117,\n\t\"./ne.js\": 117,\n\t\"./nl\": 118,\n\t\"./nl-be\": 119,\n\t\"./nl-be.js\": 119,\n\t\"./nl.js\": 118,\n\t\"./nn\": 120,\n\t\"./nn.js\": 120,\n\t\"./pa-in\": 121,\n\t\"./pa-in.js\": 121,\n\t\"./pl\": 122,\n\t\"./pl.js\": 122,\n\t\"./pt\": 123,\n\t\"./pt-br\": 124,\n\t\"./pt-br.js\": 124,\n\t\"./pt.js\": 123,\n\t\"./ro\": 125,\n\t\"./ro.js\": 125,\n\t\"./ru\": 126,\n\t\"./ru.js\": 126,\n\t\"./sd\": 127,\n\t\"./sd.js\": 127,\n\t\"./se\": 128,\n\t\"./se.js\": 128,\n\t\"./si\": 129,\n\t\"./si.js\": 129,\n\t\"./sk\": 130,\n\t\"./sk.js\": 130,\n\t\"./sl\": 131,\n\t\"./sl.js\": 131,\n\t\"./sq\": 132,\n\t\"./sq.js\": 132,\n\t\"./sr\": 133,\n\t\"./sr-cyrl\": 134,\n\t\"./sr-cyrl.js\": 134,\n\t\"./sr.js\": 133,\n\t\"./ss\": 135,\n\t\"./ss.js\": 135,\n\t\"./sv\": 136,\n\t\"./sv.js\": 136,\n\t\"./sw\": 137,\n\t\"./sw.js\": 137,\n\t\"./ta\": 138,\n\t\"./ta.js\": 138,\n\t\"./te\": 139,\n\t\"./te.js\": 139,\n\t\"./tet\": 140,\n\t\"./tet.js\": 140,\n\t\"./tg\": 141,\n\t\"./tg.js\": 141,\n\t\"./th\": 142,\n\t\"./th.js\": 142,\n\t\"./tl-ph\": 143,\n\t\"./tl-ph.js\": 143,\n\t\"./tlh\": 144,\n\t\"./tlh.js\": 144,\n\t\"./tr\": 145,\n\t\"./tr.js\": 145,\n\t\"./tzl\": 146,\n\t\"./tzl.js\": 146,\n\t\"./tzm\": 147,\n\t\"./tzm-latn\": 148,\n\t\"./tzm-latn.js\": 148,\n\t\"./tzm.js\": 147,\n\t\"./ug-cn\": 149,\n\t\"./ug-cn.js\": 149,\n\t\"./uk\": 150,\n\t\"./uk.js\": 150,\n\t\"./ur\": 151,\n\t\"./ur.js\": 151,\n\t\"./uz\": 152,\n\t\"./uz-latn\": 153,\n\t\"./uz-latn.js\": 153,\n\t\"./uz.js\": 152,\n\t\"./vi\": 154,\n\t\"./vi.js\": 154,\n\t\"./x-pseudo\": 155,\n\t\"./x-pseudo.js\": 155,\n\t\"./yo\": 156,\n\t\"./yo.js\": 156,\n\t\"./zh-cn\": 157,\n\t\"./zh-cn.js\": 157,\n\t\"./zh-hk\": 158,\n\t\"./zh-hk.js\": 158,\n\t\"./zh-tw\": 159,\n\t\"./zh-tw.js\": 159\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 200;","import React from 'react'\nimport api from 'tbot/twitch/api'\nimport Loading from 'tbot/components/loading'\n\nclass SelectChannel extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            channels: [],\n            loading: true,\n        }\n    }\n\n    componentDidMount() {\n        this.getChannels()\n    }\n\n    getChannels(name) {\n        api.get(`/api/twitch/user/admin-of`, {params: {suggest_name: name}}).then(r => {\n            this.setState({\n                channels: r.data, \n                loading: false\n            })\n        })\n    }\n\n    render() {\n        return <div className=\"modal\" tabIndex=\"-1\" role=\"dialog\">\n            <div className=\"modal-dialog\" role=\"document\" style={{margin: 0, marginTop: '3.2rem', width:'350px'}}>\n                <div className=\"modal-content\" style={{borderRadius:0}}>\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\">Channels you manage</h5>\n                        <button \n                            type=\"button\" \n                            className=\"close\" \n                            data-dismiss=\"modal\" \n                            aria-label=\"Close\" \n                            title=\"Close\"\n                            onClick={this.props.onClose}\n                        >\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        <div>\n                            <input \n                                className=\"form-control\"\n                                placeholder=\"Search channel\"\n                                onChange={(e) => {this.getChannels(e.target.value)}}\n                            />\n                        </div>\n                        <div className=\"mt-2\" style={{fontSize: '26px'}}>\n                            {this.state.channels.length === 0?<div>No channels found</div>:\n                                this.state.channels.map(c => (\n                                    <div key={c.id} className=\"clickable\"><a href={`/twitch/${c.name}/dashboard`}>{c.name}</a></div>\n                                ))\n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    }\n}\n\nexport default SelectChannel","import React from 'react'\nimport {NavLink} from 'react-router-dom'\nimport SelectChannel from './select_channel.jsx'\nimport './sidebar.scss'\n\nclass Sidebar extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            showSelectChannel: false,\n        }\n    }\n\n    onClose = () => {\n        this.setState({showSelectChannel: false})\n    }\n\n    selectChannelClick = (e) => {\n        this.setState({showSelectChannel: true})\n    }\n\n    renderConnect() {\n        if (managedUser.level < 3)\n            return null\n        return <span> \n            <div className=\"title\">CONNECT</div>\n            <NavLink to={`/twitch/${managedUser.name}/spotify`} activeClassName=\"active\">Spotify</NavLink> \n            <NavLink to={`/twitch/${managedUser.name}/discord`} activeClassName=\"active\">Discord</NavLink> \n        </span>\n    }    \n\n    renderPoints() {\n        if (managedUser.level < 3)\n            return null\n        return <span> \n            <div className=\"title\">GAMBLING</div>\n            <NavLink to={`/twitch/${managedUser.name}/points-settings`} activeClassName=\"active\">Points Settings</NavLink> \n            <NavLink to={`/twitch/${managedUser.name}/gambling-slots-settings`} activeClassName=\"active\">Slots Settings</NavLink> \n            <NavLink to={`/twitch/${managedUser.name}/gambling-roulette-settings`} activeClassName=\"active\">Roulette Settings</NavLink> \n        </span>\n    }\n\n\n    render() {\n        return (\n            <div id=\"sidebar\" className=\"sticky-top\">\n                <div \n                    className=\"d-flex\" \n                    id=\"managed-user\" \n                    title=\"Click to change channel\"\n                    onClick={this.selectChannelClick}\n                >                    \n                    <div className=\"menuicon\"><i className=\"material-icons\">menu</i></div>\n                    <div className=\"user\">\n                        {managedUser.name}\n                    </div>\n                    <div className=\"menuicon ml-auto\"><i className=\"material-icons\">arrow_drop_down</i></div>\n                </div>\n                <div id=\"items\">\n                    {managedUser.level >= 3 ?               \n                        <NavLink to={`/twitch/${managedUser.name}/dashboard`} activeClassName=\"active\">Dashboard</NavLink>\n                    : null }\n                    \n                    <NavLink to={`/twitch/${managedUser.name}/commands`} activeClassName=\"active\">Commands</NavLink>\n                    <NavLink to={`/twitch/${managedUser.name}/timers`} activeClassName=\"active\">Timers</NavLink>\n                    <NavLink to={`/twitch/${managedUser.name}/filters`} activeClassName=\"active\">Filters</NavLink>\n                    <NavLink to={`/twitch/${managedUser.name}/banned-words`} activeClassName=\"active\">Banned words</NavLink>\n                    <NavLink to={`/twitch/${managedUser.name}/chat-alerts`} activeClassName=\"active\">Chat alerts</NavLink>\n                    \n                    {managedUser.level >= 3 ?\n                        <NavLink to={`/twitch/${managedUser.name}/admins`} activeClassName=\"active\">Admins</NavLink>\n                    : null }\n\n                    {this.renderPoints()}\n\n                    {this.renderConnect()}\n\n                    <div className=\"title\">LINKS</div>\n                    <NavLink to={`/twitch/logviewer/${managedUser.name}`}>Logviewer</NavLink> \n\n                </div>\n                {this.state.showSelectChannel?\n                    <SelectChannel onClose={this.onClose} />\n                :null}\n            </div>\n        )\n    }\n\n}\n\nexport default Sidebar","import React from 'react'\nimport {NavLink} from 'react-router-dom'\n\nimport './topbar.scss'\n\nclass Sidebar extends React.Component {\n\n    render() {\n        return (\n            <div id=\"topbar\" className=\"sticky-top\">\n                <div className=\"title\" id=\"top-title\"></div>\n                <div className=\"signed-as\">Signed in as <b>{tbot['twitch_user']['user']}</b>, <a href=\"/twitch/logout\">log out</a></div>\n            </div>\n        )\n    }\n\n}\n\nexport default Sidebar","import React from 'react'\nimport api from 'tbot/twitch/api'\n\nclass BotControls extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n        this.state = {\n            settings: null,\n        }\n\t}\n\n    componentDidMount() {\n        this.getSettings()\n    }\n\n    getSettings() {\n        api.get(`/api/twitch/channels/${managedUser.id}/bot-settings`).then(r => {\n            this.setState({settings: r.data})\n        })\n    }\n\n\tjoinClick = () => {\n\t\tapi.post(`/api/twitch/channels/${managedUser.id}/bot-join`).then(r => {\n   \t\t\tthis.getSettings();\n        })\n\t}\n\n    partClick = () => {\n        api.delete(`/api/twitch/channels/${managedUser.id}/bot-join`).then(r => {\n            this.getSettings();\n        })\n    }\n\n    muteClick = () => {\n        api.post(`/api/twitch/channels/${managedUser.id}/bot-mute`).then(r => {\n            this.getSettings();\n        })\n    }\n\n    unmuteClick = () => {\n        api.delete(`/api/twitch/channels/${managedUser.id}/bot-mute`).then(r => {\n            this.getSettings();\n        })\n    }\n\n    enableChatlogClick = () => {\n        api.post(`/api/twitch/channels/${managedUser.id}/bot-enable-chatlog`).then(r => {\n            this.getSettings();\n        })\n    }\n\n    disableChatlogClick = () => {\n        api.delete(`/api/twitch/channels/${managedUser.id}/bot-enable-chatlog`).then(r => {\n            this.getSettings();\n        })\n    }\n\n    render() {\n        if (!this.state.settings)\n            return null;\n        return <div className=\"box\">\n            <div className=\"title\">Bot Controls</div>\n            <div className=\"buttons\">\n                {!this.state.settings.active?\n                    <button className=\"btn btn-success\" onClick={this.joinClick}>Join channel</button>\n                :null}\n                {this.state.settings.active?\n                    <button className=\"btn btn-danger\" onClick={this.partClick}>Part channel</button>\n                :null}\n\n                {!this.state.settings.muted?\n                    <button className=\"btn btn-secondary\" onClick={this.muteClick}>Mute bot</button>\n                :null}\n                {this.state.settings.muted?\n                    <button className=\"btn btn-secondary\" onClick={this.unmuteClick}>Unmute bot</button>\n                :null}         \n\n                {!this.state.settings.chatlog_enabled?\n                    <button className=\"btn btn-secondary\" onClick={this.enableChatlogClick}>Enable chatlog</button>\n                :null}\n                {this.state.settings.chatlog_enabled?\n                    <button className=\"btn btn-secondary\" onClick={this.disableChatlogClick}>Disable chatlog</button>\n                :null}\n            </div>\n        </div>\n    }\n}\n\nexport default BotControls","import React from 'react'\nimport api from 'tbot/twitch/api'\n\nclass ExtraAuth extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            loading: true,\n            data: null,\n        }\n    }\n\n    componentDidMount() {\n        this.getData()\n    }\n\n    getData() {\n        api.get(`/api/twitch/channels/${managedUser.id}/check-extra-auth`).then(r => {\n            this.setState({data: r.data, 'loading': false})\n        })\n    }\n\n    render() {\n        if (this.state.loading)\n            return null\n        if (this.state.data.has_extra_auth)\n            return null\n        return <div className=\"box mr-3\" style={{width: '400px'}}>\n            <div className=\"title\">Extra authorization</div>\n            <div className=\"content\">\n                For the bot to be able to change title, game category and \n                read subscribers, extra authorization is needed.\n\n                <div className=\"d-flex mt-3 mb-3\">\n                    <div className=\"ml-auto mr-auto\">\n                        <a \n                            href=\"/twitch/login?request_extra_auth=true\"\n                            className=\"btn btn-success\"\n                        >\n                            Grant extra authorization\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    }\n}\n\nexport default ExtraAuth","import React from 'react'\nimport {Redirect} from 'react-router'\nimport api from 'tbot/twitch/api'\nimport BotControls from './components/bot_controls'\nimport ExtraAuth from './components/extra_auth'\nimport {setHeader} from 'tbot/utils'\n\nclass Dashboard extends React.Component {\n\n    componentDidMount() {\n        setHeader('Dashboard')\n    }\n\n    render() {\n        if (managedUser.level < 3) \n            return <Redirect to={`/twitch/${managedUser.name}/commands`} />\n        return <div className=\"d-flex\">\n            <ExtraAuth />\n            <div style={{width: '200px'}}>\n                <BotControls />\n            </div>\n        </div>\n    }\n}\n\nexport default Dashboard","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport api from 'tbot/twitch/api'\nimport Loading from 'tbot/components/loading'\nimport {setHeader} from 'tbot/utils'\nimport {userLevelName, enabledWhenName} from 'tbot/twitch/utils'\n\nclass Commands extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            commands: [],\n            loading: true,\n        }\n    }\n\n    componentDidMount() {\n        setHeader('Commands')\n        this.getCommands()\n    }\n\n    getCommands() {        \n        api.get(`/api/twitch/channels/${managedUser.id}/commands`).then(r => {\n            this.setState({\n                commands: r.data, \n                loading: false\n            })\n        })\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading />\n        return  <div> \n                <div className=\"d-flex mb-2\">\n                    <div>\n                        <Link className=\"btn btn-primary\" to=\"commands/new\">New command</Link>\n                    </div>\n                    <div className=\"ml-auto\">\n                        <a href={`/t/${managedUser.name}/commands`} target=\"_blank\" className=\"btn btn-link\">Public commands</a>\n                    </div>\n                </div>\n                <table className=\"table table-dark table-hover\">\n                <thead>\n                    <tr>\n                        <th width=\"100px\">Command</th>\n                        <th>Response</th>\n                        <th width=\"5px\" title=\"Global cooldown\">GCD</th>\n                        <th width=\"5px\" title=\"User cooldown\">UCD</th>\n                        <th width=\"100px\" title=\"User level\">UL</th>\n                        <th width=\"5px\" title=\"Enabled when stream is\">ES</th>\n                        <th width=\"5px\" title=\"Enabled\">E</th>\n                        <th width=\"5px\"></th>\n                    </tr>\n                </thead>\n                <tbody>                    \n                    {this.state.commands.length>0?this.state.commands.map(cmd =>\n                        <tr key={cmd.id}>\n                            <td>!{cmd.cmd}</td>\n                            <td className=\"td-ellipsis\">{cmd.response}</td>\n                            <td>{cmd.global_cooldown}</td>\n                            <td>{cmd.user_cooldown}</td>\n                            <td>{userLevelName(cmd.user_level)}</td>\n                            <td>{enabledWhenName(cmd.enabled_status)}</td>\n                            <td>{cmd.enabled==1?'Yes':'No'}</td>\n                            <td className=\"text-right\"><Link to={`commands/edit/${cmd.id}`}>Edit</Link></td>\n                        </tr>\n                    ): <tr><td colSpan=\"8\" className=\"text-center\">No commands, <Link to=\"commands/new\">create one.</Link></td></tr>}\n                </tbody>\n            </table>\n        </div>\n    }\n}\n\nexport default Commands","import React from 'react'\nimport {Redirect} from 'react-router'\nimport api from 'tbot/twitch/api'\nimport Loading from 'tbot/components/loading'\nimport {setHeader, renderError} from 'tbot/utils'\nimport {userLevelName, enabledWhenName} from 'tbot/twitch/utils'\n\nclass Command extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            cmd: {\n                cmd: '',\n                response: '',\n                user_level: 0,\n                enabled_status: 0,\n                global_cooldown: 5,\n                user_cooldown: 15,\n                mod_cooldown: 0,\n                enabled: 1,\n                public: 1,\n                group_name: '',\n            },\n            templates: [],\n            loading: true,\n            error: null,\n            saving: false,\n            success: false,\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.id) {\n            setHeader('Edit command')\n            this.getCommand()\n        } else {            \n            setHeader('New command')\n            this.getTemplates()\n            this.setState({loading: false})\n        }\n    }\n\n    getCommand() {        \n        let id = this.props.match.params.id\n        api.get(`/api/twitch/channels/${managedUser.id}/commands/${id}`).then(r => {\n            for (let key in r.data) {\n                if (!(key in this.state.cmd))\n                    delete r.data[key]\n            }\n            this.setState({\n                cmd: r.data, \n                loading: false\n            })\n            setHeader(`Edit command: !${r.data.cmd}`)\n        })\n    }\n\n    getTemplates() {        \n        let id = this.props.match.params.id\n        api.get(`/api/twitch/template-commands`).then(r => {\n            this.setState({\n                templates: r.data,\n            })\n        })\n    }\n\n    handleEvent = (e) => {\n        let val = e.target.type === 'checkbox' ? e.target.checked : e.target.value\n        this.state.cmd[e.target.name] = val\n        this.setState({cmd: this.state.cmd})\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        this.setState({saving: true, error: null})\n        let id = this.props.match.params.id\n        if (id)\n            api.put(`/api/twitch/channels/${managedUser.id}/commands/${id}`, this.state.cmd).then(r => {\n                this.setState({success: true})\n            }).catch(e => {\n                this.setState({error: e.response.data, saving: false})\n            })\n        else \n            api.post(`/api/twitch/channels/${managedUser.id}/commands`, this.state.cmd).then(r => {\n                this.setState({success: true})\n            }).catch(e => {\n                this.setState({error: e.response.data, saving: false})\n            })\n    }\n\n    handleDelete = () => {\n        if (!confirm(`Delete command: ${this.state.cmd.cmd}?`))\n            return\n        this.setState({deleting: true, error: null})\n        let id = this.props.match.params.id\n        api.delete(`/api/twitch/channels/${managedUser.id}/commands/${id}`).then(r => {\n            this.setState({\n                cmd: r.data, \n                success: true,\n            })\n        }).catch(e => {\n            this.setState({error: e.response.data, deleting: false})\n        })\n    }\n\n    handleTemplate = (e) => {\n        for (let t of this.state.templates) {\n            if (t.cmd == e.target.value){\n                let d = JSON.parse(JSON.stringify(t))\n                for (let key in d) {\n                    if (!(key in this.state.cmd))\n                        delete d[key]\n                }\n                this.setState({cmd: d})\n            }\n        }\n    }\n\n    renderButton() {\n        if (this.state.saving)\n            return <button className=\"btn btn-primary\" type=\"button\" disabled>\n                    <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> Saving...\n                </button>\n        return <button type=\"submit\" className=\"btn btn-primary\">Save command</button>\n    }\n\n    renderDeleteButton() {\n        if (!this.props.match.params.id)\n            return null\n        if (this.state.deleting)\n            return <button className=\"ml-2 btn btn-danger\" type=\"button\" disabled>\n                    <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> Deleting...\n                </button>\n        return <button type=\"button\" onClick={this.handleDelete} className=\"ml-2 btn btn-danger\">Delete command</button>\n    }\n\n    renderTemplates() {\n        if (this.state.templates.length === 0)\n            return null\n        let groups = []\n        for (let cmd of this.state.templates) {\n            if (!groups.includes(cmd.group_name))\n                groups.push(cmd.group_name)\n        }\n        let i = 0\n        return <div className=\"mb-4\">\n            <label>Templates</label>\n            <select className=\"form-control\" onChange={this.handleTemplate}>\n                <option value=\"\"></option>\n                {groups.map(group => {\n                    i++;\n                    return <optgroup key={'group'+i} label={group}>\n                        {this.state.templates.map(temp => {                            \n                            if (temp.group_name != group)\n                                return null\n                            return <option key={temp.cmd} value={temp.cmd}>\n                                {temp.title}\n                            </option>\n                        })}                        \n                    </optgroup>\n                    }\n                )}\n            </select>\n        </div>\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading />\n        if (this.state.success)\n            return <Redirect to={`/twitch/${this.props.match.params.channel}/commands`} />\n\n        return <div style={{maxWidth:'700px'}}>\n            {this.renderTemplates()}\n            <form onSubmit={this.handleSubmit}>\n            <div className=\"form-group\">\n                <label htmlFor=\"cmd\">Command</label>\n                <div className=\"input-group\">\n                    <div className=\"input-group-prepend\">\n                        <div className=\"input-group-text\">!</div>\n                    </div>\n                    <input \n                        className=\"form-control\" \n                        id=\"cmd\" \n                        name=\"cmd\" \n                        value={this.state.cmd.cmd}\n                        onChange={this.handleEvent}\n                        autoFocus\n                        required\n                    />\n                </div>\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor=\"response\">Response (<a href=\"https://docs.botashell.com\" target=\"_blank\">Variables documentation</a>)</label>\n                <input \n                    className=\"form-control\" \n                    id=\"response\" \n                    name=\"response\" \n                    value={this.state.cmd.response}\n                    onChange={this.handleEvent}\n                    required\n                />\n            </div>\n\n            <div className=\"form-row\">\n                <div className=\"form-group col-md-4\">\n                    <label htmlFor=\"user_level\">User level</label>\n                    <select \n                        type=\"text\" \n                        className=\"form-control\" \n                        id=\"user_level\" \n                        name=\"user_level\" \n                        value={this.state.cmd.user_level}\n                        onChange={this.handleEvent}\n                    >\n                        <option value=\"0\">{userLevelName(0)}</option>\n                        <option value=\"1\">{userLevelName(1)}</option>\n                        <option value=\"2\">{userLevelName(2)}</option>\n                        <option value=\"7\">{userLevelName(7)}</option>\n                        <option value=\"8\">{userLevelName(8)}</option>\n                        <option value=\"9\">{userLevelName(9)}</option>\n                    </select>\n                </div>\n                <div className=\"form-group col-md-4\">\n                    <label htmlFor=\"enabled_status\">Enabled when stream is</label>\n                    <select \n                        type=\"text\" \n                        className=\"form-control\" \n                        id=\"enabled_status\" \n                        name=\"enabled_status\" \n                        value={this.state.cmd.enabled_status}\n                        onChange={this.handleEvent}\n                    >\n                        <option value=\"0\">{enabledWhenName(0)}</option>\n                        <option value=\"1\">{enabledWhenName(1)}</option>\n                        <option value=\"2\">{enabledWhenName(2)}</option>\n                    </select>\n                </div>\n                <div className=\"form-group col-md-4\">\n                    <label htmlFor=\"group_name\" title=\"Used to group the commands on the public commands page\">Group</label>\n                    <input \n                        id=\"group_name\" \n                        type=\"text\" \n                        className=\"form-control\" \n                        name=\"group_name\" \n                        value={this.state.cmd.group_name}\n                        onChange={this.handleEvent}\n                    />\n                </div>\n            </div>\n\n            <div className=\"form-row\">\n                <div className=\"form-group col-md-4\">\n                    <label htmlFor=\"global_cooldown\">Global cooldown</label>\n                    <input \n                        id=\"global_cooldown\" \n                        type=\"number\" \n                        className=\"form-control\" \n                        name=\"global_cooldown\" \n                        value={this.state.cmd.global_cooldown}\n                        onChange={this.handleEvent}\n                    />\n                </div>\n                <div className=\"form-group col-md-4\">\n                    <label htmlFor=\"user_cooldown\">User cooldown</label>\n                    <input \n                        id=\"user_cooldown\" \n                        type=\"number\" \n                        className=\"form-control\" \n                        name=\"user_cooldown\" \n                        value={this.state.cmd.user_cooldown}\n                        onChange={this.handleEvent}\n                    />\n                </div>\n                <div className=\"form-group col-md-4\">\n                    <label htmlFor=\"mod_cooldown\">Mod cooldown</label>\n                    <input \n                        id=\"mod_cooldown\" \n                        type=\"number\" \n                        className=\"form-control\" \n                        name=\"mod_cooldown\" \n                        value={this.state.cmd.mod_cooldown}\n                        onChange={this.handleEvent}\n                    />\n                </div>\n            </div>\n            <div className=\"form-group\">\n                <div className=\"custom-control custom-checkbox\">\n                    <input \n                        name=\"enabled\"\n                        type=\"checkbox\" \n                        className=\"custom-control-input\" \n                        id=\"enabled\"\n                        checked={this.state.cmd.enabled}\n                        onChange={this.handleEvent} \n                    />\n                    <label className=\"custom-control-label\" htmlFor=\"enabled\">Enabled</label>\n                </div>\n            </div>\n            <div className=\"form-group\">\n                <div className=\"custom-control custom-checkbox\">\n                    <input \n                        name=\"public\"\n                        type=\"checkbox\" \n                        className=\"custom-control-input\" \n                        id=\"public\"\n                        checked={this.state.cmd.public}\n                        onChange={this.handleEvent} \n                    />\n                    <label className=\"custom-control-label\" htmlFor=\"public\">Public (show it on the command list page)</label>\n                </div>\n            </div>\n            {renderError(this.state.error)}\n            {this.renderButton()}\n            {this.renderDeleteButton()}\n        </form>\n        </div>\n    }\n}\n\nexport default Command","import React from 'react'\nimport api from 'tbot/twitch/api'\nimport BotControls from './components/bot_controls'\nimport {setHeader} from 'tbot/utils'\nimport Loading from 'tbot/components/loading'\n\nclass Spotify extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            loading: true,\n            spotify: {},\n            connecting: false,\n            deleting: false,\n        }\n    }\n\n    componentDidMount() {\n        setHeader('Spotify')\n        this.getStatus()\n    }\n\n    getStatus() {\n        this.setState({loading: true})\n        api.get(`/api/twitch/channels/${managedUser.id}/spotify`).then(r => {\n            this.setState({spotify: r.data, loading: false})\n        })\n    }\n\n    handleSubmit = () => {\n        this.setState({connecting: true})\n    }\n\n    handleDelete = (e) => {\n        e.preventDefault()\n        this.setState({deleting: true})        \n        api.delete(`/api/twitch/channels/${managedUser.id}/spotify`).then(r => {\n            this.setState({spotify: {}, deleting: false})\n        })\n    }\n\n    render() {\n        if (this.state.loading) \n            return <Loading />\n        if (this.state.spotify.connected)\n            return <div>\n                <div className=\"mb-3\">\n                    Connected to Spotify account: {this.state.spotify.user}\n                </div>\n                <form method=\"post\" onSubmit={this.handleDelete}>\n                    <button type=\"submit\" className=\"btn btn-danger\">\n                        Disconnect Spotify\n                    </button>\n                </form>\n            </div>\n        return <div>\n            <form method=\"post\" onSubmit={this.handleSubmit} action={`/api/twitch/channels/${managedUser.id}/spotify`}>\n                <button type=\"submit\" className=\"btn btn-success\">\n                    Connect Spotify\n                </button>\n            </form>\n        </div>\n    }\n}\n\nexport default Spotify","import React from 'react'\nimport api from 'tbot/twitch/api'\n\nclass DiscordConnect extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            loading: true,\n            discord: {},\n            connecting: false,\n            deleting: false,\n        }\n    }\n\n    componentDidMount() {\n        this.getStatus()\n    }\n\n    getStatus() {\n        this.setState({loading: true})\n        api.get(`/api/twitch/channels/${managedUser.id}/discord`).then(r => {\n            this.setState({discord: r.data, loading: false})\n        })\n    }\n\n    handleSubmit = () => {\n        this.setState({connecting: true})\n    }\n\n    handleDelete = (e) => {\n        e.preventDefault()\n        this.setState({deleting: true})        \n        api.delete(`/api/twitch/channels/${managedUser.id}/discord`).then(r => {\n            this.setState({discord: {}, deleting: false})\n        })\n    }\n\n    renderButton() {\n        if (this.state.loading) \n            return <button className=\"btn btn-info\" type=\"button\" disabled>\n                <span \n                    className=\"spinner-border spinner-border-sm\" \n                    role=\"status\" \n                    aria-hidden=\"true\">\n                </span> Loading discord status...\n            </button>\n        if (this.state.connecting) \n            return <button className=\"btn btn-info\" type=\"button\" disabled>\n                <span \n                    className=\"spinner-border spinner-border-sm\" \n                    role=\"status\" \n                    aria-hidden=\"true\">\n                </span> Connecting discord...\n            </button>\n        if (this.state.deleting) \n            return <button className=\"btn btn-info\" type=\"button\" disabled>\n                <span \n                    className=\"spinner-border spinner-border-sm\" \n                    role=\"status\" \n                    aria-hidden=\"true\">\n                </span> Deleting connection discord...\n            </button>\n        if (this.state.discord.connected)\n            return <button type=\"submit\" className=\"btn btn-danger\">\n                Disconnect from Discord\n            </button>\n        return <button type=\"submit\" className=\"btn btn-success\">\n            Connect Discord\n        </button>\n    }\n\n    render() {\n        if (this.state.discord.connected)\n            return <div>\n                <div className=\"mb-3\">\n                    Connected to Discord server: {this.state.discord.name}\n                </div>\n                <form method=\"post\" onSubmit={this.handleDelete}>\n                    {this.renderButton()}\n                </form>\n            </div>\n        return <div>\n            <form method=\"post\" onSubmit={this.handleSubmit} action={`/api/twitch/channels/${managedUser.id}/discord`}>\n                {this.renderButton()}\n            </form>\n        </div>\n    }\n}\n\nexport default DiscordConnect","import React from 'react'\nimport api from 'tbot/twitch/api'\nimport SaveButton from 'tbot/components/save_button'\nimport {renderError} from 'tbot/utils'\n\nclass DiscordConnect extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            loading: true,\n            saving: false,\n            saved: false,\n            error: null,\n            data: {\n                'webhook_url': '',\n                'message': '@everyone {name} is LIVE {url}',\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.getStatus()\n    }\n\n    getStatus() {\n        this.setState({loading: true})\n        api.get(`/api/twitch/channels/${managedUser.id}/discord-live-notification`).then(r => {\n            if (r.data) {\n                this.setState({data: r.data, loading: false})\n            } else {\n                this.setState({loading: false})\n            }\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        this.setState({saving: true, error: null})\n        api.put(`/api/twitch/channels/${managedUser.id}/discord-live-notification`, this.state.data).then(r => {\n            this.setState({saved: true, saving: false})\n        }).catch(e => {\n            this.setState({error: e.response.data, saving: false})\n        })\n    }\n\n    handleEvent = (e) => {\n        this.state.data[e.target.name] = e.target.value\n        this.setState({data: this.state.data, saved: false})\n    }\n\n    render() {\n        return <form style={{maxWidth:'700px'}} onSubmit={this.handleSubmit}>  \n            <div className=\"form-group mb-2\">\n                <label htmlFor=\"webhook_url\">Webhook URL</label>\n                <input \n                    className=\"form-control\" \n                    id=\"webhook_url\" \n                    name=\"webhook_url\" \n                    value={this.state.data.webhook_url}\n                    onChange={this.handleEvent}\n                />\n                <div className=\"alert alert-info mt-1\">In Discord right click on the channel > Edit channel > Webhooks > \n                    Create webhook > Copy the Webhook URL</div>\n            </div>            \n            <div className=\"form-group mb-2\">\n                <label htmlFor=\"message\">Message</label>\n                <input \n                    className=\"form-control\" \n                    id=\"message\" \n                    name=\"message\" \n                    value={this.state.data.message}\n                    onChange={this.handleEvent}\n                />\n                <div>Variables: {`{name}`} {`{url}`}</div>\n            </div>  \n            {renderError(this.state.error)}\n            <SaveButton \n                isSaving={this.state.saving} \n                isSaved={this.state.saved}\n                savedText={`Saved`}\n            >\n                Save\n            </SaveButton>\n        </form>\n    }\n}\n\nexport default DiscordConnect","import React from 'react'\nimport api from 'tbot/twitch/api'\nimport {setHeader} from 'tbot/utils'\nimport Loading from 'tbot/components/loading'\nimport ConnectButton from './components/discord_connect'\nimport DiscordLive from './components/discord_live_notification'\n\nclass Discord extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            loading: true,\n        }\n    }\n\n    componentDidMount() {\n        setHeader('Discord')\n    }\n\n    render() {\n        return <>\n            <div className=\"mb-4\">\n                <h2>Sub role sync</h2>\n                <ConnectButton />\n            </div>\n            <div>                \n                <h2>Live Notification</h2>\n                <DiscordLive />\n            </div>\n        </>\n    }\n}\n\nexport default Discord","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport api from 'tbot/twitch/api'\nimport Loading from 'tbot/components/loading'\nimport {setHeader} from 'tbot/utils'\n\nclass Admins extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            admins: [],\n            loading: true,\n            newAdmin: {\n                user: '',\n                level: 1\n            },\n        }\n        this.levels = [\n            {'name': 'Control commands', 'level': 1},\n            {'name': 'Full control', 'level': 3},\n        ]\n    }\n\n    componentDidMount() {\n        setHeader('Admins')\n        this.getAdmins()\n    }\n\n    getAdmins() {        \n        api.get(`/api/twitch/channels/${managedUser.id}/admins`).then(r => {\n            this.setState({\n                admins: r.data, \n                loading: false\n            })\n        })\n    }\n    \n    handleNewEvent = (e) => {\n        let val = e.target.type === 'checkbox' ? e.target.checked : e.target.value\n        this.state.newAdmin[e.target.name] = val\n        this.setState({newAdmin: this.state.newAdmin})\n    }\n    \n    handleNewSubmit = (e) => {\n        e.preventDefault()\n        api.post(`/api/twitch/channels/${managedUser.id}/admins`, this.state.newAdmin).then(r => {\n            this.setState({newAdmin: {user: '', level: 1}})\n            this.getAdmins()\n        }).catch(e => {\n            alert(e.response.data.message)\n        })\n    }\n\n    handleDelete = (admin) => {\n        if (!confirm(`Delete ${admin.name}?`))\n            return\n        api.delete(`/api/twitch/channels/${managedUser.id}/admins/${admin.id}`).then(r => {\n            this.getAdmins()\n        }).catch(e => {\n            alert(e.response.data.message)\n        })   \n    }\n\n    handleChangeLevel = (e, admin) => {\n        api.put(`/api/twitch/channels/${managedUser.id}/admins/${admin.id}`, {\n            level: e.target.value,\n        }).then(r => {\n            this.getAdmins()\n        }).catch(e => {\n            alert(e.response.data.message)\n        }) \n    }\n\n    renderNewAdmin() {\n        return <form className=\"form-inline\" onSubmit={this.handleNewSubmit}>\n            <div className=\"form-group\">\n                <input \n                    className=\"form-control mr-2\" \n                    name=\"user\" \n                    placeholder=\"User\"\n                    value={this.state.newAdmin.user}\n                    onChange={this.handleNewEvent}\n                 />\n            </div>\n            <select \n                name=\"level\" \n                className=\"form-control mr-2\"\n                value={this.state.newAdmin.level}\n                onChange={this.handleNewEvent}\n            >\n                {this.levels.map(l => (\n                    <option key={l.level} value={l.level}>{l.name}</option>\n                ))}\n            </select>\n            <button type=\"submit\" className=\"btn btn-primary\">Create</button>\n        </form>\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading />\n        return  <div> \n                <div className=\"d-flex mb-4\">\n                    {this.renderNewAdmin()}\n                </div>\n                <table style={{maxWidth: '500px'}} className=\"table table-dark table-hover\">\n                <thead>\n                    <tr>\n                        <th>User</th>\n                        <th width=\"250px\">Level</th>\n                        <th width=\"1px\"> </th>\n                    </tr>\n                </thead>\n                <tbody>                    \n                    {this.state.admins.length>0?this.state.admins.map(admin =>\n                        <tr key={admin.id}>\n                            <td className=\"align-middle\">{admin.name}</td>\n                            <td>\n                                <select \n                                    name=\"level\" \n                                    className=\"form-control\"\n                                    value={admin.level}\n                                    onChange={(e) => {this.handleChangeLevel(e, admin)}}\n                                >\n                                    {this.levels.map(l => (\n                                        <option key={l.level} value={l.level}>{l.name}</option>\n                                    ))}\n                                </select>\n                            </td>\n                            <td className=\"text-right align-middle\">\n                                <i \n                                    className=\"material-icons clickable\" \n                                    title=\"Delete admin\"\n                                    onClick={() => {this.handleDelete(admin)}}\n                                >\n                                    delete_forever\n                                </i>\n                            </td>\n                        </tr>\n                    ): <tr><td colSpan=\"3\" className=\"text-center\">No admins</td></tr>}\n                </tbody>\n            </table>\n        </div>\n    }\n}\n\nexport default Admins","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport api from 'tbot/twitch/api'\nimport {setHeader} from 'tbot/utils'\nimport Loading from 'tbot/components/loading'\n\nimport './filters.scss'\n\nclass Filters extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            loading: true,\n            filters: {},\n        }\n        this.filters = [\n            {\n                'title': 'Link filter',\n                'type': 'link',\n                'desc': 'Remove links in chat.',\n            },\n            {\n                'title': 'Paragraph filter',\n                'type': 'paragraph',\n                'desc': 'Remove long messages.',\n            },\n            {\n                'title': 'Symbol filter',\n                'type': 'symbol',\n                'desc': 'Remove excessive use of symbols.',\n            },\n            {\n                'title': 'Caps filter',\n                'type': 'caps',\n                'desc': 'Remove excessive use of caps.',\n            },\n            {\n                'title': 'Emote filter',\n                'type': 'emote',\n                'desc': 'Remove excessive use of emotes.',\n            },\n            {\n                'title': 'Non-latin filter',\n                'type': 'non-latin',\n                'desc': 'Remove non-latin text',\n            },\n            {\n                'title': 'Action filter',\n                'type': 'action',\n                'desc': 'Remove colored /me text',\n            },\n        ]\n    }\n\n    componentDidMount() {\n        setHeader('Filters')\n        this.getFilters()\n    }\n\n    getFilters() {\n        api.get(`/api/twitch/channels/${managedUser.id}/filters`).then(r => {\n            this.setState({\n                loading: false,\n                filters: r.data,\n            })\n        })\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading text=\"Loading filters\" />\n        return <div id=\"filters\" className=\"d-flex flex-wrap\">\n            {this.filters.map(f => (\n                <Link key={f.type} to={`/twitch/${managedUser.name}/filters/${f.type}`}>\n                    <div className=\"filter\">\n                        <div className=\"title\">{f.title}</div>\n                        <div className=\"description\">{f.desc}</div>\n                        <div className=\"status\">\n                            {(f.type in this.state.filters && this.state.filters[f.type].enabled)?\n                                <strong className=\"text-success\">Enabled</strong>:\n                                <span className=\"text-info\">Not enabled</span>\n                            }\n                        </div>\n                    </div>\n                </Link>\n            ))}\n        </div>\n    }\n\n}\n\nexport default Filters","import React from 'react'\nimport {userLevelName} from 'tbot/twitch/utils'\n\nclass Filter extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            loading: true,\n            saving: false,\n            saved: false,\n            error: null,\n            filter: {\n                enabled: false,\n                exclude_user_level: 1,\n                warning_enabled: true,\n                warning_message: '',\n                warning_expire: 3600,\n                timeout_message: '',\n                timeout_duration: 60,\n            },\n        }\n    }\n\n    handleEvent = (e) => {\n        let val = e.target.type === 'checkbox' ? e.target.checked : e.target.value\n        this.state.filter[e.target.name] = val\n        this.setState({filter: this.state.filter})\n    }\n\n    renderBase() {\n        return <>\n            <div className=\"form-group mb-4\" style={{width: '200px'}}>\n                <label htmlFor=\"exclude_user_level\">Exclude user level</label>\n                <select \n                    type=\"text\" \n                    className=\"form-control\" \n                    id=\"exclude_user_level\" \n                    name=\"exclude_user_level\" \n                    value={this.state.filter.exclude_user_level}\n                    onChange={this.handleEvent}\n                >\n                    <option value=\"1\">{userLevelName(1)}</option>\n                    <option value=\"2\">{userLevelName(2)}</option>\n                    <option value=\"7\">{userLevelName(7)}</option>\n                </select>\n            </div>\n\n            <h5>Warning</h5>\n            <div className=\"form-group mb-2\">\n                <div className=\"custom-control custom-checkbox\">\n                    <input \n                        name=\"warning_enabled\"\n                        type=\"checkbox\" \n                        className=\"custom-control-input\" \n                        id=\"warning_enabled\"\n                        checked={this.state.filter.warning_enabled}\n                        onChange={this.handleEvent} \n                    />\n                    <label className=\"custom-control-label\" htmlFor=\"warning_enabled\">Enable warning</label>\n                </div>\n            </div>\n            <div className=\"form-group mb-2\">\n                <label htmlFor=\"warning_message\">Warning message (<a href=\"https://docs.botashell.com\" target=\"_blank\">Variables documentation</a>)</label>\n                <input \n                    className=\"form-control\" \n                    id=\"warning_message\" \n                    name=\"warning_message\" \n                    value={this.state.filter.warning_message}\n                    onChange={this.handleEvent}\n                />\n            </div>\n            <div className=\"form-group mb-4\">\n                <label htmlFor=\"warning_expire\">Warning expires after</label>\n                <div className=\"input-group\" style={{width: '160px'}}>\n                    <input \n                        id=\"warning_expire\" \n                        type=\"number\" \n                        className=\"form-control text-right\" \n                        name=\"warning_expire\" \n                        value={this.state.filter.warning_expire}\n                        onChange={this.handleEvent}\n                        required\n                    />\n                    <div className=\"input-group-append\">\n                        <div className=\"input-group-text\">seconds</div>\n                    </div>\n                </div>\n            </div>\n\n            <h5>Timeout</h5>\n            <div className=\"form-group mb-2\">\n                <label htmlFor=\"timeout_message\">Timeout message  (<a href=\"https://docs.botashell.com\" target=\"_blank\">Variables documentation</a>)</label>\n                <input \n                    className=\"form-control\" \n                    id=\"timeout_message\" \n                    name=\"timeout_message\" \n                    value={this.state.filter.timeout_message}\n                    onChange={this.handleEvent}\n                />\n            </div>\n            <div className=\"form-group\">\n                <label htmlFor=\"timeout_duration\">Timeout duration</label>\n                <div className=\"input-group\" style={{width: '160px'}}>\n                    <input \n                        id=\"timeout_duration\" \n                        type=\"number\" \n                        className=\"form-control text-right\" \n                        name=\"timeout_duration\" \n                        value={this.state.filter.timeout_duration}\n                        onChange={this.handleEvent}\n                        required\n                    />\n                    <div className=\"input-group-append\">\n                        <div className=\"input-group-text\">seconds</div>\n                    </div>\n                </div>\n            </div>\n        </>\n    }\n}\n\nexport default Filter","import React from 'react'\nimport {Redirect} from 'react-router'\nimport api from 'tbot/twitch/api'\nimport {setHeader, renderError} from 'tbot/utils'\nimport Loading from 'tbot/components/loading'\nimport SaveButton from 'tbot/components/save_button'\nimport Filter from './components/filter'\n\nclass Filter_link extends Filter {\n\n    constructor(props) {\n        super(props)\n        this.state.filter.warning_message = '@{sender}, You are not permitted to post links [warning]'\n        this.state.filter.timeout_message = '@{sender}, You are not permitted to post links'\n        this.state.filter.whitelist = []\n    }\n\n    componentDidMount() {\n        setHeader('Link filter')\n        this.getFilters()\n    }\n\n    getFilters() {\n        api.get(`/api/twitch/channels/${managedUser.id}/filters/link`).then(r => {\n            if (!r.data) {\n                this.setState({loading: false})\n                return\n            }\n            for (let key in r.data) {\n                if (!(key in this.state.filter))\n                    delete r.data[key]\n            }\n            r.data.whitelist = r.data.whitelist.join('\\n')\n            this.setState({\n                loading: false,\n                filter: r.data,\n            })\n        })\n    }\n\n    submit = (e) => {\n        e.preventDefault()\n        if (!Array.isArray(this.state.filter.whitelist))\n            this.state.filter.whitelist = this.state.filter.whitelist.split('\\n')\n        this.state.filter.whitelist = this.state.filter.whitelist.filter(e => (\n            e != ''\n        ))\n        api.put(`/api/twitch/channels/${managedUser.id}/filters/link`, this.state.filter).then(r => {\n            this.setState({saved: true})\n        }).catch(e => {            \n            this.state.filter.whitelist = this.state.filter.whitelist.join('\\n')\n            this.setState({error: e.response.data, saving: false})\n        })\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading text=\"Loading filter\" />\n        if (this.state.saved)\n            return <Redirect to={`/twitch/${managedUser.name}/filters`} />\n        return <form style={{maxWidth:'700px'}} onSubmit={this.submit}>\n            <div className=\"form-group\">\n                <div className=\"custom-control custom-checkbox\">\n                    <input \n                        name=\"enabled\"\n                        type=\"checkbox\" \n                        className=\"custom-control-input\" \n                        id=\"enabled\"\n                        checked={this.state.filter.enabled}\n                        onChange={this.handleEvent} \n                    />\n                    <label className=\"custom-control-label\" htmlFor=\"enabled\">Enable Link filter</label>\n                </div>\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor=\"timeout_duration\">Whitelist (1 domain per line, e.g. youtube.com)</label>\n                <div className=\"input-group\" style={{width: '200px'}}>\n                    <textarea \n                        className=\"form-control\" \n                        name=\"whitelist\" \n                        value={this.state.filter.whitelist}\n                        onChange={this.handleEvent}\n                        rows=\"2\"\n                    />\n                </div>\n            </div>\n\n            {this.renderBase()}\n            \n            {renderError(this.state.error)}\n            <SaveButton isSaving={this.state.saving} text=\"Save filter\">Save filter</SaveButton>\n        </form>\n    }\n\n}\n\nexport default Filter_link","import React from 'react'\nimport {Redirect} from 'react-router'\nimport api from 'tbot/twitch/api'\nimport {setHeader, renderError} from 'tbot/utils'\nimport Loading from 'tbot/components/loading'\nimport SaveButton from 'tbot/components/save_button'\nimport Filter from './components/filter'\n\nclass Filter_symbol extends Filter {\n\n    constructor(props) {\n        super(props)\n        this.state.filter.warning_message = '@{sender}, Your message was too long [warning]'\n        this.state.filter.timeout_message = '@{sender}, Your message was too long'\n        this.state.filter.max_length = 350\n    }\n\n    componentDidMount() {\n        setHeader('Paragraph filter')\n        this.getFilters()\n    }\n\n    getFilters() {\n        api.get(`/api/twitch/channels/${managedUser.id}/filters/paragraph`).then(r => {\n            if (!r.data) {\n                this.setState({loading: false})\n                return\n            }\n            for (let key in r.data) {\n                if (!(key in this.state.filter))\n                    delete r.data[key]\n            }\n            this.setState({\n                loading: false,\n                filter: r.data,\n            })\n        })\n    }\n\n    submit = (e) => {\n        e.preventDefault()\n        api.put(`/api/twitch/channels/${managedUser.id}/filters/paragraph`, this.state.filter).then(r => {\n            this.setState({saved: true})\n        }).catch(e => {\n            this.setState({error: e.response.data, saving: false})\n        })\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading text=\"Loading filter\" />\n        if (this.state.saved)\n            return <Redirect to={`/twitch/${managedUser.name}/filters`} />\n        return <form style={{maxWidth:'700px'}} onSubmit={this.submit}>\n            <div className=\"form-group\">\n                <div className=\"custom-control custom-checkbox\">\n                    <input \n                        name=\"enabled\"\n                        type=\"checkbox\" \n                        className=\"custom-control-input\" \n                        id=\"enabled\"\n                        checked={this.state.filter.enabled}\n                        onChange={this.handleEvent} \n                    />\n                    <label className=\"custom-control-label\" htmlFor=\"enabled\">Enable Paragraph filter</label>\n                </div>\n            </div>\n\n            <div className=\"form-group mb-2\">\n                <label htmlFor=\"max_length\">Max length</label>\n                <input \n                    className=\"form-control\" \n                    id=\"max_length\" \n                    name=\"max_length\"\n                    type=\"number\"\n                    value={this.state.filter.max_length}\n                    onChange={this.handleEvent}\n                    style={{width: '200px'}}\n                />\n            </div>\n\n            {this.renderBase()}\n            \n            {renderError(this.state.error)}\n            <SaveButton isSaving={this.state.saving} text=\"Save filter\">Save filter</SaveButton>\n        </form>\n    }\n\n}\n\nexport default Filter_symbol","import React from 'react'\nimport {Redirect} from 'react-router'\nimport api from 'tbot/twitch/api'\nimport {setHeader, renderError} from 'tbot/utils'\nimport Loading from 'tbot/components/loading'\nimport SaveButton from 'tbot/components/save_button'\nimport Filter from './components/filter'\n\nclass Filter_symbol extends Filter {\n\n    constructor(props) {\n        super(props)\n        this.state.filter.warning_message = '@{sender}, Your message contained too many symbols [warning]'\n        this.state.filter.timeout_message = '@{sender}, Your message contained too many symbols'\n        this.state.filter.max_symbols = 15\n    }\n\n    componentDidMount() {\n        setHeader('Symbol filter')\n        this.getFilters()\n    }\n\n    getFilters() {\n        api.get(`/api/twitch/channels/${managedUser.id}/filters/symbol`).then(r => {\n            if (!r.data) {\n                this.setState({loading: false})\n                return\n            }\n            for (let key in r.data) {\n                if (!(key in this.state.filter))\n                    delete r.data[key]\n            }\n            this.setState({\n                loading: false,\n                filter: r.data,\n            })\n        })\n    }\n\n    submit = (e) => {\n        e.preventDefault()\n        api.put(`/api/twitch/channels/${managedUser.id}/filters/symbol`, this.state.filter).then(r => {\n            this.setState({saved: true})\n        }).catch(e => {\n            this.setState({error: e.response.data, saving: false})\n        })\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading text=\"Loading filter\" />\n        if (this.state.saved)\n            return <Redirect to={`/twitch/${managedUser.name}/filters`} />\n        return <form style={{maxWidth:'700px'}} onSubmit={this.submit}>\n            <div className=\"form-group\">\n                <div className=\"custom-control custom-checkbox\">\n                    <input \n                        name=\"enabled\"\n                        type=\"checkbox\" \n                        className=\"custom-control-input\" \n                        id=\"enabled\"\n                        checked={this.state.filter.enabled}\n                        onChange={this.handleEvent} \n                    />\n                    <label className=\"custom-control-label\" htmlFor=\"enabled\">Enable Symbol filter</label>\n                </div>\n            </div>\n\n            <div className=\"form-group mb-2\">\n                <label htmlFor=\"max_symbols\">Max symbols</label>\n                <input \n                    className=\"form-control\" \n                    id=\"max_symbols\" \n                    name=\"max_symbols\"\n                    type=\"number\"\n                    value={this.state.filter.max_symbols}\n                    onChange={this.handleEvent}\n                    style={{width: '200px'}}\n                />\n            </div>\n\n            {this.renderBase()}\n            \n            {renderError(this.state.error)}\n            <SaveButton isSaving={this.state.saving} text=\"Save filter\">Save filter</SaveButton>\n        </form>\n    }\n\n}\n\nexport default Filter_symbol","import React from 'react'\nimport {Redirect} from 'react-router'\nimport api from 'tbot/twitch/api'\nimport {setHeader, renderError} from 'tbot/utils'\nimport Loading from 'tbot/components/loading'\nimport SaveButton from 'tbot/components/save_button'\nimport Filter from './components/filter'\n\nclass Filter_caps extends Filter {\n\n    constructor(props) {\n        super(props)\n        this.state.filter.warning_message = '@{sender}, Chill with the caps [warning]'\n        this.state.filter.timeout_message = '@{sender}, Chill with the caps'\n        this.state.filter.min_length = 20\n        this.state.filter.max_percent = 60\n    }\n\n    componentDidMount() {\n        setHeader('Caps filter')\n        this.getFilters()\n    }\n\n    getFilters() {\n        api.get(`/api/twitch/channels/${managedUser.id}/filters/caps`).then(r => {\n            if (!r.data) {\n                this.setState({loading: false})\n                return\n            }\n            for (let key in r.data) {\n                if (!(key in this.state.filter))\n                    delete r.data[key]\n            }\n            this.setState({\n                loading: false,\n                filter: r.data,\n            })\n        })\n    }\n\n    submit = (e) => {\n        e.preventDefault()\n        api.put(`/api/twitch/channels/${managedUser.id}/filters/caps`, this.state.filter).then(r => {\n            this.setState({saved: true})\n        }).catch(e => {\n            this.setState({error: e.response.data, saving: false})\n        })\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading text=\"Loading filter\" />\n        if (this.state.saved)\n            return <Redirect to={`/twitch/${managedUser.name}/filters`} />\n        return <form style={{maxWidth:'700px'}} onSubmit={this.submit}>\n            <div className=\"form-group\">\n                <div className=\"custom-control custom-checkbox\">\n                    <input \n                        name=\"enabled\"\n                        type=\"checkbox\" \n                        className=\"custom-control-input\" \n                        id=\"enabled\"\n                        checked={this.state.filter.enabled}\n                        onChange={this.handleEvent} \n                    />\n                    <label className=\"custom-control-label\" htmlFor=\"enabled\">Enable Caps filter</label>\n                </div>\n            </div>\n\n            <div className=\"form-group mb-2\">\n                <label htmlFor=\"min_length\">Min length</label>\n                <input \n                    className=\"form-control\" \n                    id=\"min_length\" \n                    name=\"min_length\"\n                    type=\"number\"\n                    value={this.state.filter.min_length}\n                    onChange={this.handleEvent}\n                    style={{width: '200px'}}\n                />\n            </div>\n\n            <div className=\"form-group mb-2\">\n                <label htmlFor=\"max_percent\">Max percent</label>\n                <input \n                    className=\"form-control\" \n                    id=\"max_percent\" \n                    name=\"max_percent\"\n                    type=\"number\"\n                    value={this.state.filter.max_percent}\n                    onChange={this.handleEvent}\n                    style={{width: '200px'}}\n                />\n            </div>\n\n            {this.renderBase()}\n            \n            {renderError(this.state.error)}\n            <SaveButton isSaving={this.state.saving} text=\"Save filter\">Save filter</SaveButton>\n        </form>\n    }\n\n}\n\nexport default Filter_caps","import React from 'react'\nimport {Redirect} from 'react-router'\nimport api from 'tbot/twitch/api'\nimport {setHeader, renderError} from 'tbot/utils'\nimport Loading from 'tbot/components/loading'\nimport SaveButton from 'tbot/components/save_button'\nimport Filter from './components/filter'\n\nclass Filter_emote extends Filter {\n\n    constructor(props) {\n        super(props)\n        this.state.filter.warning_message = '@{sender}, Chill with the emotes [warning]'\n        this.state.filter.timeout_message = '@{sender}, Chill with the emotes'\n        this.state.filter.max_emotes = 20\n    }\n\n    componentDidMount() {\n        setHeader('Emote filter')\n        this.getFilters()\n    }\n\n    getFilters() {\n        api.get(`/api/twitch/channels/${managedUser.id}/filters/emote`).then(r => {\n            if (!r.data) {\n                this.setState({loading: false})\n                return\n            }\n            for (let key in r.data) {\n                if (!(key in this.state.filter))\n                    delete r.data[key]\n            }\n            this.setState({\n                loading: false,\n                filter: r.data,\n            })\n        })\n    }\n\n    submit = (e) => {\n        e.preventDefault()\n        api.put(`/api/twitch/channels/${managedUser.id}/filters/emote`, this.state.filter).then(r => {\n            this.setState({saved: true})\n        }).catch(e => {\n            this.setState({error: e.response.data, saving: false})\n        })\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading text=\"Loading filter\" />\n        if (this.state.saved)\n            return <Redirect to={`/twitch/${managedUser.name}/filters`} />\n        return <form style={{maxWidth:'700px'}} onSubmit={this.submit}>\n            <div className=\"form-group\">\n                <div className=\"custom-control custom-checkbox\">\n                    <input \n                        name=\"enabled\"\n                        type=\"checkbox\" \n                        className=\"custom-control-input\" \n                        id=\"enabled\"\n                        checked={this.state.filter.enabled}\n                        onChange={this.handleEvent} \n                    />\n                    <label className=\"custom-control-label\" htmlFor=\"enabled\">Enable Emote filter</label>\n                </div>\n            </div>\n\n            <div className=\"form-group mb-2\">\n                <label htmlFor=\"max_emotes\">Max emotes</label>\n                <input \n                    className=\"form-control\" \n                    id=\"max_emotes\" \n                    name=\"max_emotes\"\n                    type=\"number\"\n                    value={this.state.filter.max_emotes}\n                    onChange={this.handleEvent}\n                    style={{width: '200px'}}\n                />\n            </div>\n\n            {this.renderBase()}\n            \n            {renderError(this.state.error)}\n            <SaveButton isSaving={this.state.saving} text=\"Save filter\">Save filter</SaveButton>\n        </form>\n    }\n\n}\n\nexport default Filter_emote","import React from 'react'\nimport {Redirect} from 'react-router'\nimport api from 'tbot/twitch/api'\nimport {setHeader, renderError} from 'tbot/utils'\nimport Loading from 'tbot/components/loading'\nimport SaveButton from 'tbot/components/save_button'\nimport Filter from './components/filter'\n\nclass Filter_non_latin extends Filter {\n\n    constructor(props) {\n        super(props)\n        this.state.filter.warning_message = '@{sender}, English in chat, thanks [warning]'\n        this.state.filter.timeout_message = '@{sender}, English in chat, thanks'\n        this.state.filter.min_length = 20\n        this.state.filter.max_percent = 60\n    }\n\n    componentDidMount() {\n        setHeader('Non-latin filter')\n        this.getFilters()\n    }\n\n    getFilters() {\n        api.get(`/api/twitch/channels/${managedUser.id}/filters/non-latin`).then(r => {\n            if (!r.data) {\n                this.setState({loading: false})\n                return\n            }\n            for (let key in r.data) {\n                if (!(key in this.state.filter))\n                    delete r.data[key]\n            }\n            this.setState({\n                loading: false,\n                filter: r.data,\n            })\n        })\n    }\n\n    submit = (e) => {\n        e.preventDefault()\n        api.put(`/api/twitch/channels/${managedUser.id}/filters/non-latin`, this.state.filter).then(r => {\n            this.setState({saved: true})\n        }).catch(e => {\n            this.setState({error: e.response.data, saving: false})\n        })\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading text=\"Loading filter\" />\n        if (this.state.saved)\n            return <Redirect to={`/twitch/${managedUser.name}/filters`} />\n        return <form style={{maxWidth:'700px'}} onSubmit={this.submit}>\n            <div className=\"form-group\">\n                <div className=\"custom-control custom-checkbox\">\n                    <input \n                        name=\"enabled\"\n                        type=\"checkbox\" \n                        className=\"custom-control-input\" \n                        id=\"enabled\"\n                        checked={this.state.filter.enabled}\n                        onChange={this.handleEvent} \n                    />\n                    <label className=\"custom-control-label\" htmlFor=\"enabled\">Enable Non-latin filter</label>\n                </div>\n            </div>\n\n            <div className=\"form-group mb-2\">\n                <label htmlFor=\"min_length\">Min number of Non-latin chars</label>\n                <input \n                    className=\"form-control\" \n                    id=\"min_length\" \n                    name=\"min_length\"\n                    type=\"number\"\n                    value={this.state.filter.min_length}\n                    onChange={this.handleEvent}\n                    style={{width: '200px'}}\n                />\n            </div>\n\n            <div className=\"form-group mb-2\">\n                <label htmlFor=\"max_percent\">Max percent</label>\n                <input \n                    className=\"form-control\" \n                    id=\"max_percent\" \n                    name=\"max_percent\"\n                    type=\"number\"\n                    value={this.state.filter.max_percent}\n                    onChange={this.handleEvent}\n                    style={{width: '200px'}}\n                />\n            </div>\n\n            {this.renderBase()}\n            \n            {renderError(this.state.error)}\n            <SaveButton isSaving={this.state.saving} text=\"Save filter\">Save filter</SaveButton>\n        </form>\n    }\n\n}\n\nexport default Filter_non_latin","import React from 'react'\nimport {Redirect} from 'react-router'\nimport api from 'tbot/twitch/api'\nimport {setHeader, renderError} from 'tbot/utils'\nimport Loading from 'tbot/components/loading'\nimport SaveButton from 'tbot/components/save_button'\nimport Filter from './components/filter'\n\nclass Filter_action extends Filter {\n\n    constructor(props) {\n        super(props)\n        this.state.filter.warning_message = '@{sender}, You are not permitted to use colored text [warning]'\n        this.state.filter.timeout_message = '@{sender}, You are not permitted to use colored text'\n    }\n\n    componentDidMount() {\n        setHeader('Action filter')\n        this.getFilters()\n    }\n\n    getFilters() {\n        api.get(`/api/twitch/channels/${managedUser.id}/filters/action`).then(r => {\n            if (!r.data) {\n                this.setState({loading: false})\n                return\n            }\n            for (let key in r.data) {\n                if (!(key in this.state.filter))\n                    delete r.data[key]\n            }\n            this.setState({\n                loading: false,\n                filter: r.data,\n            })\n        })\n    }\n\n    submit = (e) => {\n        e.preventDefault()\n        api.put(`/api/twitch/channels/${managedUser.id}/filters/action`, this.state.filter).then(r => {\n            this.setState({saved: true})\n        }).catch(e => {\n            this.setState({error: e.response.data, saving: false})\n        })\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading text=\"Loading filter\" />\n        if (this.state.saved)\n            return <Redirect to={`/twitch/${managedUser.name}/filters`} />\n        return <form style={{maxWidth:'700px'}} onSubmit={this.submit}>\n            <div className=\"form-group\">\n                <div className=\"custom-control custom-checkbox\">\n                    <input \n                        name=\"enabled\"\n                        type=\"checkbox\" \n                        className=\"custom-control-input\" \n                        id=\"enabled\"\n                        checked={this.state.filter.enabled}\n                        onChange={this.handleEvent} \n                    />\n                    <label className=\"custom-control-label\" htmlFor=\"enabled\">Enable Action filter</label>\n                </div>\n            </div>\n\n            {this.renderBase()}\n            \n            {renderError(this.state.error)}\n\n            <SaveButton isSaving={this.state.saving} text=\"Save filter\">Save filter</SaveButton>\n        </form>\n    }\n\n}\n\nexport default Filter_action","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport {Redirect} from 'react-router'\nimport api from 'tbot/twitch/api'\nimport {setHeader, renderError} from 'tbot/utils'\nimport Loading from 'tbot/components/loading'\nimport SaveButton from 'tbot/components/save_button'\nimport Filter from './components/filter'\n\nclass Filter_banned_words_groups extends Filter {\n\n    constructor(props) {\n        super(props)\n        this.state.groups = []\n    }\n\n    componentDidMount() {\n        setHeader('Banned words groups')\n        this.getFilters()\n    }\n\n    getFilters() {\n        this.setState({loading: true})\n        api.get(`/api/twitch/channels/${managedUser.id}/filters/banned-words-groups`).then(r => {\n            this.setState({\n                loading: false,\n                groups: r.data,\n            })\n        })\n    }\n    \n    render() {\n        if (this.state.loading)\n            return <Loading text=\"Loading filter\" />\n        return <>\n            <div className=\"d-flex mb-2\">\n                <div>\n                    <Link className=\"btn btn-primary\" to=\"banned-words/new\">New group</Link>\n                </div>\n            </div>\n            <table className=\"table\" style={{width:'500px'}}>\n                <tbody>\n                {this.state.groups.length > 0?\n                    this.state.groups.map((group, idx) =>\n                        <tr key={group.id}>\n                            <td><Link to={`banned-words/edit/${group.id}`}>{group.name}</Link></td>\n                        </tr>\n                    ):\n                    <tr><td colSpan=\"8\" className=\"text-center\">\n                        No groups, <Link to=\"banned-words/new\">create one.</Link>\n                    </td></tr>\n                }\n                </tbody>\n            </table>\n        </>\n    }\n\n}\n\nexport default Filter_banned_words_groups","import React from 'react'\nimport {Redirect} from 'react-router'\nimport api from 'tbot/twitch/api'\nimport {setHeader, renderError} from 'tbot/utils'\nimport Loading from 'tbot/components/loading'\nimport SaveButton from 'tbot/components/save_button'\nimport Filter from './components/filter'\n\nclass Filter_banned_words extends Filter {\n\n    constructor(props) {\n        super(props)\n        this.state.filter.name = ''\n        this.state.filter.enabled = true\n        this.state.filter.warning_message = '@{sender}, Banned word [warning]'\n        this.state.filter.timeout_message = '@{sender}, Banned word'\n        this.state.filter.timeout_duration = 86400,\n        this.state.filter.warning_enabled = false\n        this.state.filter.banned_words = [{\n            id: null,\n            banned_words: '',\n        }]\n        this.state.changed_banned_words = []\n        this.state.saved = false\n        this.state.errors = {}\n        this.state.testing = false\n        this.state.testResult = null\n        this.state.redirect_back = false\n        this.filter_id = this.props.match.params.id\n    }\n\n    componentDidMount() {\n        if (this.filter_id) {\n            setHeader('Edit banned words group')\n            this.getFilter()\n        } else {            \n            setHeader('New banned words group')\n            this.setState({loading: false})\n        }\n    }\n\n    getFilter() {\n        let id = this.filter_id\n        api.get(`/api/twitch/channels/${managedUser.id}/filters/banned-words-groups/${id}`).then(r => {\n            if (!r.data) {\n                this.setState({loading: false})\n                return\n            }            \n            for (let key in r.data) {\n                if (!(key in this.state.filter))\n                    delete r.data[key]\n            }\n            this.setState({\n                loading: false,\n                filter: r.data,\n            })\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        this.setState({'saving': true})\n        let data = {...this.state.filter}\n        delete data.banned_words\n        let id = this.filter_id\n        if (id) {\n            api.put(`/api/twitch/channels/${managedUser.id}/filters/banned-words-groups/${id}`, data).then(r => {\n                this.setState({saving: false, saved: true})\n            }).catch(e => {\n                this.setState({error: e.response.data, saving: false})\n            })\n        } else {\n            api.post(`/api/twitch/channels/${managedUser.id}/filters/banned-words-groups`, data).then(r => {\n                console.log(r.data)\n                this.filter_id = r.data.id\n                this.setState({saving: false, saved: true})\n            }).catch(e => {\n                this.setState({error: e.response.data, saving: false})\n            })            \n        }\n    }\n\n    handleBannedWordsChange = (e) => {\n        this.state.testResult = null\n        let d = this.state.filter.banned_words[e.target.dataset.id]\n        d.banned_words = e.target.value\n        if (!this.state.changed_banned_words.includes(d))\n            this.state.changed_banned_words.push(d)\n        this.setState(this.state)\n    }\n\n    handleSaveBannedWords = (e) => {\n        this.setState({testResult: null})\n        let idx = e.target.dataset.id\n        let d = this.state.filter.banned_words[idx]\n        let filter_id = this.filter_id\n        if (d.id) {\n            api.put(`/api/twitch/channels/${managedUser.id}/filters/banned-words-groups/${filter_id}/banned-words/${d.id}`, {\n                'banned_words': d.banned_words,\n            }).then(r => {\n                this.setState({\n                    changed_banned_words: this.state.changed_banned_words.filter(item => item != d),\n                    errors: {},\n                })\n            }).catch(e => {\n                this.setState({errors: {\n                    [idx]: e.response.data,\n                }})\n            })\n        } else {\n            api.post(`/api/twitch/channels/${managedUser.id}/filters/banned-words-groups/${filter_id}/banned-words`, {\n                'banned_words': d.banned_words,\n            }).then(r => {\n                d.id = r.data.id\n                this.setState({\n                    changed_banned_words: this.state.changed_banned_words.filter(item => item != d),\n                    errors: {},\n                })\n            }).catch(e => {\n                this.setState({errors: {\n                    [idx]: e.response.data,\n                }})\n            })\n        }\n    }\n\n    handleDeleteBannedWords = (e) => {\n        this.setState({testResult: null})\n        let idx = e.target.dataset.id\n        let d = this.state.filter.banned_words[idx]\n        let filter_id = this.filter_id      \n        if (!d.id) {\n            this.removeBannedWords(d)\n            return\n        }\n        api.delete(`/api/twitch/channels/${managedUser.id}/filters/banned-words-groups/${filter_id}/banned-words/${d.id}`).then(r => {\n            this.removeBannedWords(d)\n        }).catch(e => {\n            this.setState({errors: {\n                [idx]: e.response.data,\n            }})\n        })  \n    }\n\n    removeBannedWords(d) {\n        let f = {...this.state.filter}\n        f.banned_words = f.banned_words.filter(item => item != d)\n        this.setState({\n            changed_banned_words: this.state.changed_banned_words.filter(item => item != d),\n            filter: f,\n            errors: {},\n        })\n    }\n\n    handleAdd = (e) => {\n        this.setState({testResult: null})\n        this.state.filter.banned_words.push({\n            id: null,\n            banned_words: '',\n        })\n        this.setState(this.state)\n    }\n\n    handleTest = (e) => {\n        e.preventDefault()\n        this.setState({\n            testing: true,\n            testResult: null,\n        })\n        api.post(`/api/twitch/channels/${managedUser.id}/filters/banned-words-groups/${this.filter_id}/test`, {\n            'message': e.target.elements.message.value,\n        }).then(r => {\n            this.setState({\n                testing: false,\n                testResult: r.data.match,\n            })\n        }).catch(e => {\n            this.setState({\n                error: e.response.data,\n                testing: false,\n                testResult: null,\n            })\n        })  \n    }\n\n    handleTestChange = (e) => {\n        this.setState({\n            testResult: null,\n        })\n    }\n\n    renderTest() {\n        return <form \n                className=\"d-flex\"\n                onSubmit={this.handleTest}\n            >\n            <div \n                className=\"flex-grow-1\"\n                style={{'width': '240px'}}\n            >\n                <input \n                    className=\"form-control\"\n                    placeholder=\"Test a message for a match\"\n                    name=\"message\"\n                    onChange={this.handleTestChange}\n                />\n            </div>\n            <div className=\"ml-2\">\n                <SaveButton\n                    savingTest={'Testing'}\n                    savedText={'Matched'}\n                    errorText={'Didn\\'t match'}\n                    isSaving={this.state.testing}\n                    isSaved={this.state.testResult}\n                    hasError={this.state.testResult === false}\n\n                >\n                    Test\n                </SaveButton>\n            </div>\n        </form>\n    }\n\n    renderBannedWords() {\n        return <>\n            {this.state.filter.banned_words.map((bw, idx) => (\n                <div key={`bw-${idx}`}>\n                <div className='d-flex mb-2'>\n                    <div className='flex-grow-1'>\n                        <input \n                            className=\"form-control\"\n                            value={bw.banned_words}\n                            data-id={idx}\n                            onChange={this.handleBannedWordsChange}\n                        />\n                    </div>\n                    {this.state.changed_banned_words.includes(bw)?\n                        <div>\n                            <button \n                                title=\"Save\"\n                                type=\"button\" \n                                className=\"btn btn-secondary ml-2\"\n                                data-id={idx}\n                                onClick={this.handleSaveBannedWords}\n                            >Save</button>\n                        </div>:''\n                    }\n                    <div>\n                        <button \n                            title=\"Delete\"\n                            type=\"button\" \n                            className=\"btn btn-secondary ml-2\"\n                            data-id={idx}\n                            onClick={this.handleDeleteBannedWords}\n                        >×</button>\n                    </div>\n                </div>\n                {this.state.errors[idx]?renderError(this.state.errors[idx]):''}\n                </div>\n            ))}\n            <div className=\"d-flex\">\n                <div className=\"flex-shring-1\">\n                    <button \n                        type=\"button\" \n                        className=\"btn btn-secondary\"\n                        onClick={this.handleAdd}\n                    >\n                        Add\n                    </button>\n                </div>\n                <div className=\"ml-auto\">\n                    {this.renderTest()}\n                </div>\n            </div>\n        </>\n    }\n\n    handleDelete = (e) => {\n        if (!confirm(`Delete this filter?`))\n            return\n        api.delete(`/api/twitch/channels/${managedUser.id}/filters/banned-words-groups/${this.filter_id}`).then(r => {\n            this.setState({\n                redirect_back: true,\n            })\n        })\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading text=\"Loading filter\" />\n        if (this.state.saved && !this.props.match.params.id)\n            return <Redirect to={`/twitch/${managedUser.name}/banned-words/edit/${this.filter_id}`} />\n        if (this.state.redirect_back)\n            return <Redirect to={`/twitch/${managedUser.name}/banned-words`} />\n        return <div style={{maxWidth:'700px'}}>\n            {this.filter_id?\n                <div className=\"mb-4\">\n                    <h5>Banned words</h5>\n                    <p className=\"mb-1\">Use the prefix: \"re:\" for a regular expression.</p>\n                    {this.renderBannedWords()}\n                </div>\n            : ''}\n            <form onSubmit={this.handleSubmit}>\n            <div className=\"form-group\">\n                <label htmlFor=\"name\">Group name</label>\n                <input \n                    className=\"form-control\" \n                    id=\"name\" \n                    name=\"name\" \n                    value={this.state.filter.name}\n                    onChange={this.handleEvent}\n                    autoFocus={true}\n                    required={true}\n                />\n            </div>\n            {this.filter_id?\n                <>\n                <div className=\"form-group\">\n                    <div className=\"custom-control custom-checkbox\">\n                        <input \n                            name=\"enabled\"\n                            type=\"checkbox\" \n                            className=\"custom-control-input\" \n                            id=\"enabled\"\n                            checked={this.state.filter.enabled}\n                            onChange={this.handleEvent}\n                        />\n                        <label className=\"custom-control-label\" htmlFor=\"enabled\">Enabled</label>\n                    </div>\n                </div>\n                {this.renderBase()}\n                </>\n            : ''\n            }\n\n            {renderError(this.state.error)}\n\n            <div className=\"mt-2\">\n                <SaveButton \n                    isSaving={this.state.saving} \n                    text=\"Save\"\n                >\n                    {this.props.match.params.id?'Save':'Create group'}\n                </SaveButton>\n                {this.filter_id?\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-danger ml-2\"\n                        onClick={this.handleDelete}\n                    >\n                        Delete\n                    </button>: ''}\n            </div>\n        </form>\n        </div>\n    }\n\n}\n\nexport default Filter_banned_words","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport api from 'tbot/twitch/api'\nimport Loading from 'tbot/components/loading'\nimport {setHeader} from 'tbot/utils'\nimport {userLevelName, enabledWhenName} from 'tbot/twitch/utils'\n\nclass Timers extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            timers: [],\n            loading: true,\n        }\n    }\n\n    componentDidMount() {\n        setHeader('Timers')\n        this.getTimers()\n    }\n\n    getTimers() {        \n        api.get(`/api/twitch/channels/${managedUser.id}/timers`).then(r => {\n            this.setState({\n                timers: r.data, \n                loading: false\n            })\n        })\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading />\n        return  <> \n                <div className=\"d-flex mb-2\">\n                    <div>\n                        <Link className=\"btn btn-primary\" to=\"timers/new\">New timer</Link>\n                    </div>\n                </div>\n                <table className=\"table table-dark table-hover\">\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Interval</th>\n                        <th title=\"Enabled when stream is\">Enabled status</th>\n                        <th title=\"Enabled\">Enabled</th>\n                        <th width=\"5px\"></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.state.timers.length>0?\n                        this.state.timers.map(timer =>\n                            <tr key={timer.id}>\n                                <td>{timer.name}</td>\n                                <td>{timer.interval} minutes</td>\n                                <td>{enabledWhenName(timer.enabled_status)}</td>\n                                <td>{timer.enabled==1?'Yes':'No'}</td>\n                                <td className=\"text-right\"><Link to={`timers/edit/${timer.id}`}>Edit</Link></td>\n                            </tr>\n                        ): <tr><td colSpan=\"5\" className=\"text-center\">No timers, <Link to=\"timers/new\">create one.</Link></td></tr>\n                    }\n                </tbody>\n            </table>\n        </>\n    }\n}\n\nexport default Timers","import React from 'react'\nimport {Redirect} from 'react-router'\nimport api from 'tbot/twitch/api'\nimport Loading from 'tbot/components/loading'\nimport {setHeader, renderError} from 'tbot/utils'\nimport {userLevelName, enabledWhenName} from 'tbot/twitch/utils'\n\nclass Timer extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            timer: {\n                name: '',\n                messages: '',\n                enabled_status: 0,\n                enabled: 1,\n                interval: 5,\n                send_message_order: 1,\n            },\n            loading: true,\n            error: null,\n            saving: false,\n            success: false,\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.id) {\n            setHeader('Edit timer')\n            this.getTimer()\n        } else {            \n            setHeader('New timer')\n            this.setState({loading: false})\n        }\n    }\n\n    getTimer() {        \n        let id = this.props.match.params.id\n        api.get(`/api/twitch/channels/${managedUser.id}/timers/${id}`).then(r => {\n            for (let key in r.data) {\n                if (!(key in this.state.timer))\n                    delete r.data[key]\n            }\n            r.data.messages = r.data.messages.join('\\n')\n            this.setState({\n                timer: r.data, \n                loading: false\n            })\n            setHeader(`Edit timer: ${r.data.name}`)\n        })\n    }\n\n    handleEvent = (e) => {\n        let val = e.target.type === 'checkbox' ? e.target.checked : e.target.value\n        this.state.timer[e.target.name] = val\n        this.setState({timer: this.state.timer})\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        this.setState({saving: true, error: null})\n        if (!Array.isArray(this.state.timer.messages))\n            this.state.timer.messages = this.state.timer.messages.split('\\n')\n        this.state.timer.messages = this.state.timer.messages.filter(e => (\n            e != ''\n        ))\n        let id = this.props.match.params.id\n        if (id)\n            api.put(`/api/twitch/channels/${managedUser.id}/timers/${id}`, this.state.timer).then(r => {\n                this.setState({success: true})\n            }).catch(e => {\n                this.state.timer.messages = this.state.timer.messages.join('\\n')\n                this.setState({error: e.response.data, saving: false})\n            })\n        else \n            api.post(`/api/twitch/channels/${managedUser.id}/timers`, this.state.timer).then(r => {\n                this.setState({success: true})\n            }).catch(e => {\n                this.state.timer.messages = this.state.timer.messages.join('\\n')\n                this.setState({error: e.response.data, saving: false})\n            })\n    }\n\n    handleDelete = () => {\n        if (!confirm(`Delete timer: ${this.state.timer.timer}?`))\n            return\n        this.setState({deleting: true, error: null})\n        let id = this.props.match.params.id\n        api.delete(`/api/twitch/channels/${managedUser.id}/timers/${id}`).then(r => {\n            this.setState({\n                timer: r.data, \n                success: true,\n            })\n        }).catch(e => {\n            this.setState({error: e.response.data, deleting: false})\n        })\n    }\n\n    renderButton() {\n        if (this.state.saving)\n            return <button className=\"btn btn-primary\" type=\"button\" disabled>\n                    <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> Saving...\n                </button>\n        return <button type=\"submit\" className=\"btn btn-primary\">Save Timer</button>\n    }\n\n    renderDeleteButton() {\n        if (!this.props.match.params.id)\n            return null\n        if (this.state.deleting)\n            return <button className=\"ml-2 btn btn-danger\" type=\"button\" disabled>\n                    <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> Deleting...\n                </button>\n        return <button type=\"button\" onClick={this.handleDelete} className=\"ml-2 btn btn-danger\">Delete Timer</button>\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading />\n        if (this.state.success)\n            return <Redirect to={`/twitch/${this.props.match.params.channel}/timers`} />\n\n        return <form onSubmit={this.handleSubmit} style={{maxWidth:'700px'}}>\n            <div className=\"form-group\">\n                <label htmlFor=\"name\">Name</label>\n                <input \n                    className=\"form-control\" \n                    id=\"name\" \n                    name=\"name\" \n                    value={this.state.timer.name}\n                    onChange={this.handleEvent}\n                    autoFocus\n                    required\n                />\n            </div>\n\n            <div className=\"form-row\">\n                <div className=\"form-group col-md-4\">\n                    <label htmlFor=\"interval\">Interval</label>\n                    <div className=\"input-group\">\n                        <input \n                            id=\"interval\" \n                            type=\"number\" \n                            className=\"form-control text-right\" \n                            name=\"interval\" \n                            value={this.state.timer.interval}\n                            onChange={this.handleEvent}\n                            required\n                        />\n                        <div className=\"input-group-append\">\n                            <div className=\"input-group-text\">minutes</div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"form-group col-md-4\">\n                    <label htmlFor=\"enabled_status\">Enabled when stream is</label>\n                    <select \n                        type=\"text\" \n                        className=\"form-control\" \n                        id=\"enabled_status\" \n                        name=\"enabled_status\" \n                        value={this.state.timer.enabled_status}\n                        onChange={this.handleEvent}\n                    >\n                        <option value=\"0\">{enabledWhenName(0)}</option>\n                        <option value=\"1\">{enabledWhenName(1)}</option>\n                        <option value=\"2\">{enabledWhenName(2)}</option>\n                    </select>\n                </div>                \n                <div className=\"form-group col-md-4\">\n                    <label htmlFor=\"send_message_order\">Message choose order</label>\n                    <select \n                        type=\"text\" \n                        className=\"form-control\" \n                        id=\"send_message_order\" \n                        name=\"send_message_order\" \n                        value={this.state.timer.send_message_order}\n                        onChange={this.handleEvent}\n                    >\n                        <option value=\"1\">In order</option>\n                        <option value=\"2\">Random order</option>\n                    </select>\n                </div>\n            </div>\n\n            <div className=\"form-group\">\n                <div className=\"custom-control custom-checkbox\">\n                    <input \n                        name=\"enabled\"\n                        type=\"checkbox\" \n                        className=\"custom-control-input\" \n                        id=\"enabled\"\n                        checked={this.state.timer.enabled}\n                        onChange={this.handleEvent} \n                    />\n                    <label className=\"custom-control-label\" htmlFor=\"enabled\">Enabled</label>\n                </div>\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor=\"messages\" className=\"mb-0\">Messages (<a href=\"https://docs.botashell.com\" target=\"_blank\">Variables documentation</a>)</label>\n                <small className=\"form-text mb-2 mt-0\">\n                    One message per line. 1 line will be chosen when the timer triggers.\n                </small>\n                <textarea \n                    className=\"form-control\" \n                    id=\"messages\" \n                    name=\"messages\" \n                    value={this.state.timer.messages}\n                    onChange={this.handleEvent}\n                    required\n                    rows=\"5\"\n                />\n            </div>\n\n            {renderError(this.state.error)}\n            {this.renderButton()}\n            {this.renderDeleteButton()}\n        </form>\n    }\n}\n\nexport default Timer","import React from 'react'\nimport api from 'tbot/twitch/api'\nimport {setHeader, renderError} from 'tbot/utils'\nimport Loading from 'tbot/components/loading'\nimport SaveButton from 'tbot/components/save_button'\n\nclass ChatAlerts extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            loading: true,\n            alerts: {},\n            errors: {},\n            saved: null,\n            saving: null,\n        }\n        this.alertTypes = [\n            {\n                name: 'Sub alert',\n                type: 'sub',\n                minAmount: true,\n                canAdd: true,\n                vars: [\n                    '{twitch_message}',\n                    '{user}',\n                    '{months}',\n                    '{months_streak}',\n                    '{plan}',\n                ],\n            },\n            {\n                name: 'Sub gift alert',\n                type: 'subgift',\n                minAmount: false,\n                canAdd: false,\n                vars: [\n                    '{twitch_message}',\n                    '{user}',\n                    '{to_user}',\n                    '{plan}',\n                    '{months}',                    \n                ],\n            },\n            {\n                name: 'Mystery sub gift',\n                type: 'submysterygift',\n                minAmount: false,\n                canAdd: false,\n                vars: [\n                    '{twitch_message}',\n                    '{user}',\n                    '{amount}',\n                    '{plan}',\n                ],\n            },\n            {\n                name: 'Gifted sub upgraded',\n                type: 'giftpaidupgrade',\n                minAmount: false,\n                canAdd: false,\n                vars: [\n                    '{twitch_message}',\n                    '{user}',\n                    '{from_user}',\n                ],\n            },\n            {\n                name: 'Sub extended (app)',\n                type: 'extendsub',\n                minAmount: false,\n                canAdd: false,\n                vars: [\n                    '{twitch_message}',\n                    '{months}',\n                    '{plan}',\n                    '{end_month}',\n                    '{end_month_name}',\n                ],\n            },\n        ]\n    }\n\n    componentDidMount() {\n        setHeader('Chat alerts')\n        this.getAlerts()\n    }\n\n    getAlerts() {\n        api.get(`/api/twitch/channels/${managedUser.id}/chat-alerts`).then(r => {\n            this.setState({alerts: r.data, loading: false})\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        let t = e.target.dataset.type\n        this.setState({saving: t})\n        api.put(`/api/twitch/channels/${managedUser.id}/chat-alerts`, {\n            [t]: this.state.alerts[t]\n        }).then(r => {\n            this.setState({\n                alerts: r.data, \n                errors: {},\n                saved: t,\n                saving: null,\n            })\n        }).catch(e => {\n            this.setState({\n                errors: {\n                    [t]: e.response.data\n                }\n            })\n        })\n    }\n\n    handleChange = (e) => {\n        if (!(e.target.dataset.type in this.state.alerts))\n            this.state.alerts[e.target.dataset.type] = [{}]\n        let alerts = this.state.alerts[e.target.dataset.type]\n        alerts[e.target.dataset.id][e.target.name] = e.target.value\n        this.state.errors = {}\n        this.state.saved = null\n        this.state.saving = null\n        this.setState(this.state)\n    }\n\n    handleAdd = (e) => {\n        if (!(e.target.dataset.type in this.state.alerts))\n            this.state.alerts[e.target.dataset.type] = []\n        this.state.alerts[e.target.dataset.type].push({\n            message: '',\n        })\n        this.setState(this.state)        \n    }\n\n    handleDelete = (e) => {\n        // Since our list items has no ID other than it's index,\n        // the render will not pick up on the \n        // So to fix that we just render an empty list and then\n        // render the new list.\n        let t = e.target.dataset.type\n        this.state.alerts[t].splice(e.target.dataset.id, 1)\n        let d = this.state.alerts[t]\n        this.state.alerts[t] = []\n        this.state.errors = {}\n        this.state.saving = null\n        this.state.saved = null\n        this.setState(this.state, () => {\n            this.state.alerts[t] = d\n            this.forceUpdate()\n        })        \n    }\n\n    renderType(alertType) {\n        let alerts = this.state.alerts[alertType.type] || [{\n            message: '',\n            min_amount: 0,\n        }]\n        return <form \n                onSubmit={this.handleSubmit} \n                onChange={this.handleChange} \n                style={{maxWidth:'700px'}}\n                data-type={alertType.type}\n                className='mb-4'\n                key={alertType.type}\n            >\n                <h2>{alertType.name}</h2>\n                <div>Variables: <pre className=\"mb-0\">{alertType.vars.map((val) => {\n                    return <span key={'var-'+val}>{val} </span>\n                })}</pre></div>\n                <div className='d-flex'>\n                    <div className='flex-grow-1'>\n                        <label>Message</label>\n                    </div>\n                    {alertType.minAmount?\n                    <div className='ml-2'>\n                        <label>Months</label>\n                    </div>:''}\n                    <div style={{width: '48px'}}></div>\n                </div>\n                {     \n                    alerts.map((val, idx) => {\n                        return <div className='d-flex mb-2' key={`alert-${alertType.type}-${idx}`}>\n                            <div className='flex-grow-1'>\n                                <div className='input-group'>\n                                    <input \n                                        type='text' \n                                        className='form-control' \n                                        name='message'\n                                        data-type={alertType.type}\n                                        data-id={idx}\n                                        defaultValue={val.message}\n                                    />\n                                </div>\n                            </div>\n                            {alertType.minAmount?\n                                <div className='ml-2'>\n                                    <div className='input-group'>\n                                        <input \n                                            style={{width: '100px'}}\n                                            type='number' \n                                            className='form-control text-right'\n                                            name='min_amount'\n                                            data-type={alertType.type}\n                                            data-id={idx}\n                                            defaultValue={val.min_amount}\n                                        />\n                                    </div>\n                                </div>:''\n                            }                            \n                            {alertType.canAdd?\n                            <div>\n                                <button \n                                    title=\"Delete\"\n                                    type=\"button\" \n                                    className=\"btn btn-secondary ml-2\"\n                                    data-type={alertType.type}\n                                    data-id={idx}\n                                    onClick={this.handleDelete}\n                                >×</button>\n                            </div>:''\n                            }\n                        </div>\n                    })\n                }\n\n                <SaveButton \n                    isSaving={this.state.saving == alertType.type}\n                    isSaved={this.state.saved == alertType.type}\n                    savedText='Saved'\n                >\n                    Save\n                </SaveButton>\n                \n                {alertType.canAdd?\n                    <button type=\"button\" className=\"btn btn-secondary ml-2\" data-type={alertType.type} onClick={this.handleAdd}>Add</button>\n                    :''\n                }\n\n                {renderError(this.state.errors[alertType.type])}\n        \n        </form>\n    }\n\n    render() {\n        if (this.state.loading) \n            return <Loading />\n        return <>\n            {this.alertTypes.map((val) => {\n                return this.renderType(val)\n            })}\n        </>\n\n    }\n}\n\nexport default ChatAlerts","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport api from 'tbot/twitch/api'\nimport Loading from 'tbot/components/loading'\nimport {setHeader, renderError} from 'tbot/utils'\nimport SaveButton from 'tbot/components/save_button'\n\nclass PointsSettings extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            loading: true,\n            saving: false,\n            saved: false,\n            settings: {\n                enabled: false,\n                points_name: 'Points',\n                points_per_min: 1,\n                points_per_min_sub_multiplier: 1,\n                points_per_sub: 500,\n                points_per_cheer: 1,\n                ignore_users: [],\n            }\n        }\n    }\n\n    componentDidMount() {\n        setHeader('Points Settings')\n        this.getSettings()\n    }\n\n    getSettings() {\n        api.get(`/api/twitch/channels/${managedUser.id}/points-settings`).then(r => {\n            if (r.data) {\n                r.data.ignore_users = r.data.ignore_users.join(' ')\n                this.setState({\n                    loading: false,\n                    settings: r.data,\n                })\n            } else {\n                this.setState({\n                    loading: false,\n                })\n            }\n        })\n    }\n    \n    handleEvent = (e) => {\n        let val = e.target.type === 'checkbox' ? e.target.checked : e.target.value\n        this.state.settings[e.target.name] = val\n        this.setState({\n            settings: this.state.settings,\n            saved: false,\n        })\n    }\n\n    handleSubmit = (e) => {        \n        e.preventDefault()\n        this.setState({saving: true})\n        if (!Array.isArray(this.state.settings.ignore_users))\n            this.state.settings.ignore_users = this.state.settings.ignore_users.split(' ')\n        this.state.settings.ignore_users = this.state.settings.ignore_users.filter(e => (\n            e != ''\n        ))\n        api.put(`/api/twitch/channels/${managedUser.id}/points-settings`, this.state.settings).then(r => {\n            this.state.settings.ignore_users = this.state.settings.ignore_users.join(' ')\n            this.setState({saving: false, saved: true})\n        }).catch(e => {\n            this.state.settings.ignore_users = this.state.settings.ignore_users.join(' ')\n            this.setState({saving: false})\n        })\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading />\n        return <form style={{maxWidth:'700px'}} onSubmit={this.handleSubmit}>\n            <div className=\"form-group\">\n                <div className=\"custom-control custom-checkbox\">\n                    <input \n                        name=\"enabled\"\n                        type=\"checkbox\" \n                        className=\"custom-control-input\" \n                        id=\"enabled\"\n                        checked={this.state.settings.enabled}\n                        onChange={this.handleEvent} \n                    />\n                    <label className=\"custom-control-label\" htmlFor=\"enabled\">Enable points</label>\n                </div>\n            </div>\n\n\n            <div className=\"form-group mb-2\">\n                <label htmlFor=\"points_name\">Points name</label>\n                <input \n                    className=\"form-control\" \n                    id=\"points_name\" \n                    name=\"points_name\"\n                    type=\"text\"\n                    value={this.state.settings.points_name}\n                    onChange={this.handleEvent}\n                    style={{width: '200px'}}\n                />\n            </div>\n\n            <div className=\"d-flex mb-2\">\n                <div className=\"form-group\">\n                    <label htmlFor=\"points_per_min\">Points per min</label>\n                    <input \n                        className=\"form-control\" \n                        id=\"points_per_min\" \n                        name=\"points_per_min\"\n                        type=\"number\"\n                        value={this.state.settings.points_per_min}\n                        onChange={this.handleEvent}\n                        style={{width: '200px'}}\n                    />\n                </div>\n\n                <div className=\"form-group ml-2\">\n                    <label htmlFor=\"points_per_min_sub_multiplier\">Sub multiplier</label>\n                    <input \n                        className=\"form-control\" \n                        id=\"points_per_min_sub_multiplier\" \n                        name=\"points_per_min_sub_multiplier\"\n                        type=\"number\"\n                        value={this.state.settings.points_per_min_sub_multiplier}\n                        onChange={this.handleEvent}\n                        style={{width: '200px'}}\n                    />\n                </div>\n            </div>\n\n            <div className=\"d-flex mb-2\">\n                <div className=\"form-group\">\n                    <label htmlFor=\"points_per_sub\">Points per sub</label>\n                    <input \n                        className=\"form-control\" \n                        id=\"points_per_sub\" \n                        name=\"points_per_sub\"\n                        type=\"number\"\n                        value={this.state.settings.points_per_sub}\n                        onChange={this.handleEvent}\n                        style={{width: '200px'}}\n                    />\n                </div>\n\n                <div className=\"form-group ml-2\">\n                    <label htmlFor=\"points_per_cheer\">Points per cheer</label>\n                    <input \n                        className=\"form-control\" \n                        id=\"points_per_cheer\" \n                        name=\"points_per_cheer\"\n                        type=\"number\"\n                        value={this.state.settings.points_per_cheer}\n                        onChange={this.handleEvent}\n                        style={{width: '200px'}}\n                    />\n                </div>\n            </div>\n\n\n            <div className=\"form-group\">\n                <label htmlFor=\"ignore_users\">Ignore users (separate with a space)</label>\n                <div className=\"input-group\" style={{maxWidth: '700px'}}>\n                    <textarea \n                        className=\"form-control\" \n                        name=\"ignore_users\" \n                        value={this.state.settings.ignore_users}\n                        onChange={this.handleEvent}\n                        rows=\"2\"\n                    />\n                </div>\n            </div>\n            \n            {renderError(this.state.error)}\n            <SaveButton \n                isSaving={this.state.saving} \n                isSaved={this.state.saved}\n                savedText=\"Settings saved\"\n                text=\"Save settings\"\n            >Save settings</SaveButton>\n        </form>\n    }\n}\n\nexport default PointsSettings","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport api from 'tbot/twitch/api'\nimport Loading from 'tbot/components/loading'\nimport {setHeader, renderError} from 'tbot/utils'\nimport SaveButton from 'tbot/components/save_button'\n\nclass GamblingSlots extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            loading: true,\n            saving: false,\n            saved: false,\n            settings: {\n                emote_pool_size: 4,\n                emotes: 'MrDestructoid SeriousSloth OSFrog OhMyDog',\n                payout_percent: 95,\n                min_bet: 5,\n                max_bet: 0,\n                win_message: '@{user} {emotes} you won {bet} {points_name} and now have {points} {points_name}',\n                allin_win_message: '@{user} {emotes} you WON {bet} {points_name} and now have {points} {points_name} EZ',\n                lose_message: '@{user} {emotes} you lost {bet} {points_name}',\n                allin_lose_message: '@{user} {emotes} you lost {bet} {points_name} PepeLaugh',\n            }\n        }\n    }\n\n    componentDidMount() {\n        setHeader('Gambling - Slots Settings')\n        this.getSettings()\n    }\n\n    getSettings() {\n        api.get(`/api/twitch/channels/${managedUser.id}/gambling-slots-settings`).then(r => {\n            if (r.data) {\n                r.data.emotes = r.data.emotes.join(' ')\n                this.setState({\n                    loading: false,\n                    settings: r.data,\n                })\n            } else {\n                this.setState({\n                    loading: false,\n                })\n            }\n        })\n    }\n    \n    handleEvent = (e) => {\n        let val = e.target.type === 'checkbox' ? e.target.checked : e.target.value\n        this.state.settings[e.target.name] = val\n        this.setState({\n            settings: this.state.settings,\n            saved: false,\n        })\n    }\n\n    handleSubmit = (e) => {        \n        e.preventDefault()\n        this.setState({saving: true})\n        if (!Array.isArray(this.state.settings.emotes))\n            this.state.settings.emotes = this.state.settings.emotes.split(' ')\n        this.state.settings.emotes = this.state.settings.emotes.filter(e => (\n            e != ''\n        ))\n        api.put(`/api/twitch/channels/${managedUser.id}/gambling-slots-settings`, this.state.settings).then(r => {\n            this.state.settings.emotes = this.state.settings.emotes.join(' ')\n            this.setState({saving: false, saved: true})\n        }).catch(e => {\n            this.state.settings.emotes = this.state.settings.emotes.join(' ')\n            this.setState({saving: false})\n        })\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading />\n        return <form style={{maxWidth:'700px'}} onSubmit={this.handleSubmit}>\n            <div className=\"d-flex mb-2\">\n                <div className=\"form-group\">\n                    <label htmlFor=\"emote_pool_size\">Emote pool size</label>\n                    <input \n                        className=\"form-control\" \n                        id=\"emote_pool_size\" \n                        name=\"emote_pool_size\"\n                        type=\"number\"\n                        value={this.state.settings.emote_pool_size}\n                        onChange={this.handleEvent}\n                        style={{width: '200px'}}\n                    />\n                </div>\n\n                <div className=\"form-group ml-2\">\n                    <label htmlFor=\"payout_percent\">Payout percent</label>\n                    <input \n                        className=\"form-control\" \n                        id=\"payout_percent\" \n                        name=\"payout_percent\"\n                        type=\"number\"\n                        value={this.state.settings.payout_percent}\n                        onChange={this.handleEvent}\n                        style={{width: '200px'}}\n                    />\n                </div>\n            </div>\n\n            <div className=\"d-flex mb-2\">\n                <div className=\"form-group\">\n                    <label htmlFor=\"min_bet\">Min bet</label>\n                    <input \n                        className=\"form-control\" \n                        id=\"min_bet\" \n                        name=\"min_bet\"\n                        type=\"number\"\n                        value={this.state.settings.min_bet}\n                        onChange={this.handleEvent}\n                        style={{width: '200px'}}\n                    />\n                </div>\n\n                <div className=\"form-group ml-2\">\n                    <label htmlFor=\"max_bet\">Max bet</label>\n                    <input \n                        className=\"form-control\" \n                        id=\"max_bet\" \n                        name=\"max_bet\"\n                        type=\"number\"\n                        value={this.state.settings.max_bet}\n                        onChange={this.handleEvent}\n                        style={{width: '200px'}}\n                    />\n                </div>\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor=\"emotes\">Emotes (separate with a space)</label>\n                <div className=\"input-group\" style={{maxWidth: '700px'}}>\n                    <textarea \n                        className=\"form-control\" \n                        name=\"emotes\" \n                        value={this.state.settings.emotes}\n                        onChange={this.handleEvent}\n                        rows=\"2\"\n                    />\n                </div>\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor=\"win_message\">Win message</label>                \n                <input \n                    className=\"form-control\" \n                    id=\"win_message\" \n                    name=\"win_message\"\n                    type=\"text\"\n                    value={this.state.settings.win_message}\n                    onChange={this.handleEvent}\n                />\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor=\"allin_win_message\">All-in win message</label>                \n                <input \n                    className=\"form-control\" \n                    id=\"allin_win_message\" \n                    name=\"allin_win_message\"\n                    type=\"text\"\n                    value={this.state.settings.allin_win_message}\n                    onChange={this.handleEvent}\n                />\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor=\"lose_message\">Lose message</label>                \n                <input \n                    className=\"form-control\" \n                    id=\"lose_message\" \n                    name=\"lose_message\"\n                    type=\"text\"\n                    value={this.state.settings.lose_message}\n                    onChange={this.handleEvent}\n                />\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor=\"allin_lose_message\">All-in lose message</label>                \n                <input \n                    className=\"form-control\" \n                    id=\"allin_lose_message\" \n                    name=\"allin_lose_message\"\n                    type=\"text\"\n                    value={this.state.settings.allin_lose_message}\n                    onChange={this.handleEvent}\n                />\n            </div>\n\n            <div>Vars for win and lose messages: <pre>{'{'}user{'}'} {'{'}emotes{'}'} {'{'}bet{'}'} {'{'}points{'}'} {'{'}points_name{'}'}</pre></div>\n                \n            \n            {renderError(this.state.error)}\n            <SaveButton \n                isSaving={this.state.saving} \n                isSaved={this.state.saved}\n                savedText=\"Settings saved\"\n                text=\"Save settings\"\n            >Save settings</SaveButton>\n        </form>\n    }\n}\n\nexport default GamblingSlots","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport api from 'tbot/twitch/api'\nimport Loading from 'tbot/components/loading'\nimport {setHeader, renderError} from 'tbot/utils'\nimport SaveButton from 'tbot/components/save_button'\n\nclass GamblingRoulette extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            loading: true,\n            saving: false,\n            saved: false,\n            settings: {\n                win_chance: 45,\n                min_bet: 5,\n                max_bet: 0,\n                win_message: '@{user}, You won {bet} {points_name} and now have {points} {points_name}',\n                allin_win_message: '@{user}, You WON {bet} {points_name} and now have {points} {points_name} EZ',\n                lose_message: '@{user}, You lost {bet} {points_name} and now have {points} {points_name}',\n                allin_lose_message: '@{user}, You lost {bet} {points_name} PepeLaugh',\n            }\n        }\n    }\n\n    componentDidMount() {\n        setHeader('Gambling - Roulette Settings')\n        this.getSettings()\n    }\n\n    getSettings() {\n        api.get(`/api/twitch/channels/${managedUser.id}/gambling-roulette-settings`).then(r => {\n            if (r.data) {\n                this.setState({\n                    loading: false,\n                    settings: r.data,\n                })\n            } else {\n                this.setState({\n                    loading: false,\n                })\n            }\n        })\n    }\n    \n    handleEvent = (e) => {\n        let val = e.target.type === 'checkbox' ? e.target.checked : e.target.value\n        this.state.settings[e.target.name] = val\n        this.setState({\n            settings: this.state.settings,\n            saved: false,\n        })\n    }\n\n    handleSubmit = (e) => {        \n        e.preventDefault()\n        this.setState({saving: true})\n        api.put(`/api/twitch/channels/${managedUser.id}/gambling-roulette-settings`, this.state.settings).then(r => {\n            this.setState({saving: false, saved: true})\n        }).catch(e => {\n            this.setState({saving: false})\n        })\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading />\n        return <form style={{maxWidth:'700px'}} onSubmit={this.handleSubmit}>\n            <div className=\"d-flex mb-2\">\n                <div className=\"form-group\">\n                    <label htmlFor=\"win_chance\">Win chance</label>\n                    <input \n                        className=\"form-control\" \n                        id=\"win_chance\" \n                        name=\"win_chance\"\n                        type=\"number\"\n                        value={this.state.settings.win_chance}\n                        onChange={this.handleEvent}\n                        style={{width: '200px'}}\n                    />\n                </div>\n            </div>\n\n            <div className=\"d-flex mb-2\">\n                <div className=\"form-group\">\n                    <label htmlFor=\"min_bet\">Min bet</label>\n                    <input \n                        className=\"form-control\" \n                        id=\"min_bet\" \n                        name=\"min_bet\"\n                        type=\"number\"\n                        value={this.state.settings.min_bet}\n                        onChange={this.handleEvent}\n                        style={{width: '200px'}}\n                    />\n                </div>\n\n                <div className=\"form-group ml-2\">\n                    <label htmlFor=\"max_bet\">Max bet</label>\n                    <input \n                        className=\"form-control\" \n                        id=\"max_bet\" \n                        name=\"max_bet\"\n                        type=\"number\"\n                        value={this.state.settings.max_bet}\n                        onChange={this.handleEvent}\n                        style={{width: '200px'}}\n                    />\n                </div>\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor=\"win_message\">Win message</label>                \n                <input \n                    className=\"form-control\" \n                    id=\"win_message\" \n                    name=\"win_message\"\n                    type=\"text\"\n                    value={this.state.settings.win_message}\n                    onChange={this.handleEvent}\n                />\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor=\"allin_win_message\">All-in win message</label>                \n                <input \n                    className=\"form-control\" \n                    id=\"allin_win_message\" \n                    name=\"allin_win_message\"\n                    type=\"text\"\n                    value={this.state.settings.allin_win_message}\n                    onChange={this.handleEvent}\n                />\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor=\"lose_message\">Lose message</label>                \n                <input \n                    className=\"form-control\" \n                    id=\"lose_message\" \n                    name=\"lose_message\"\n                    type=\"text\"\n                    value={this.state.settings.lose_message}\n                    onChange={this.handleEvent}\n                />\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor=\"allin_lose_message\">All-in lose message</label>                \n                <input \n                    className=\"form-control\" \n                    id=\"allin_lose_message\" \n                    name=\"allin_lose_message\"\n                    type=\"text\"\n                    value={this.state.settings.allin_lose_message}\n                    onChange={this.handleEvent}\n                />\n            </div>\n\n            <div>Vars for win and lose messages: <pre>{'{'}user{'}'} {'{'}emotes{'}'} {'{'}bet{'}'} {'{'}points{'}'} {'{'}points_name{'}'}</pre></div>\n                \n            \n            {renderError(this.state.error)}\n            <SaveButton \n                isSaving={this.state.saving} \n                isSaved={this.state.saved}\n                savedText=\"Settings saved\"\n                text=\"Save settings\"\n            >Save settings</SaveButton>\n        </form>\n    }\n}\n\nexport default GamblingRoulette","import React from 'react'\nimport {Route, Redirect} from \"react-router-dom\"\nimport {requireAuth} from 'tbot/twitch/utils'\nimport {renderError} from 'tbot/utils'\nimport api from 'tbot/twitch/api'\nimport Loading from 'tbot/components/loading'\nimport Sidebar from './components/sidebar'\nimport Topbar from './components/topbar'\nimport Dashboard from './dashboard'\nimport Commands from './commands'\nimport Command from './command'\nimport Spotify from './spotify'\nimport Discord from './discord'\nimport Admins from './admins'\nimport Filters from './filters'\nimport Filter_link from './filter_link'\nimport Filter_paragraph from './filter_paragraph'\nimport Filter_symbol from './filter_symbol'\nimport Filter_caps from './filter_caps'\nimport Filter_emote from './filter_emote'\nimport Filter_non_latin from './filter_non_latin'\nimport Filter_action from './filter_action'\nimport Filter_banned_words_groups from './filter_banned_words_groups'\nimport Filter_banned_words from './filter_banned_words'\nimport Timers from './timers'\nimport Timer from './timer'\nimport ChatAlerts from './chat_alerts'\nimport PointsSettings from './points_settings'\nimport GamblingSlotsSettings from './gambling_slots_settings'\nimport GamblingRouletteSettings from './gambling_roulette_settings'\n\nclass Main extends React.Component {\n\n    render() {\n        if (!this.props.match.params.channel) \n            return <Redirect to={`/twitch/${window.tbot.twitch_user.user}/dashboard`} />\n        if (this.state.loading) {\n            this.getChannel()\n            return <Loading text=\"LOADING\" />\n        }\n        if (this.state.error) {\n            return <div className=\"mt-5 ml-auto mr-auto\" style={{width: '600px'}}>\n                {renderError(this.state.error)}\n            </div>\n        }\n        return <div id=\"main-wrapper\">\n            <Sidebar />\n            <div id=\"content-wrapper\">\n                <Topbar />\n                <div id=\"content\">\n                    <Route exact path='/twitch/:channel/dashboard' component={Dashboard}/>\n                    <Route exact path='/twitch/:channel/commands' component={Commands}/>\n                    <Route exact path='/twitch/:channel/commands/edit/:id' component={Command}/>\n                    <Route exact path='/twitch/:channel/commands/new' component={Command}/>\n                    <Route exact path='/twitch/:channel/spotify' component={Spotify}/>\n                    <Route exact path='/twitch/:channel/discord' component={Discord}/>\n                    <Route exact path='/twitch/:channel/admins' component={Admins}/>\n                    <Route exact path='/twitch/:channel/filters' component={Filters}/>\n                    <Route exact path='/twitch/:channel/filters/link' component={Filter_link}/>\n                    <Route exact path='/twitch/:channel/filters/paragraph' component={Filter_paragraph}/>\n                    <Route exact path='/twitch/:channel/filters/symbol' component={Filter_symbol}/>\n                    <Route exact path='/twitch/:channel/filters/caps' component={Filter_caps}/>\n                    <Route exact path='/twitch/:channel/filters/emote' component={Filter_emote}/>\n                    <Route exact path='/twitch/:channel/filters/non-latin' component={Filter_non_latin}/>\n                    <Route exact path='/twitch/:channel/filters/action' component={Filter_action}/>\n                    <Route exact path='/twitch/:channel/banned-words' component={Filter_banned_words_groups}/>\n                    <Route exact path='/twitch/:channel/banned-words/edit/:id' component={Filter_banned_words}/>\n                    <Route exact path='/twitch/:channel/banned-words/new' component={Filter_banned_words}/>\n                    <Route exact path='/twitch/:channel/timers' component={Timers}/>\n                    <Route exact path='/twitch/:channel/timers/edit/:id' component={Timer}/>\n                    <Route exact path='/twitch/:channel/timers/new' component={Timer}/>\n                    <Route exact path='/twitch/:channel/chat-alerts' component={ChatAlerts}/>\n                    <Route exact path='/twitch/:channel/points-settings' component={PointsSettings} />\n                    <Route exact path='/twitch/:channel/gambling-slots-settings' component={GamblingSlotsSettings} />\n                    <Route exact path='/twitch/:channel/gambling-roulette-settings' component={GamblingRouletteSettings} />\n                </div>\n            </div>\n        </div>\n    }\n\n    constructor(props) {\n        super(props)\n        requireAuth()\n        this.state = {\n            loading: true,\n            errors: null,\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.location !== prevProps.location) {\n            window.scrollTo(0, 0)\n        }\n    }\n\n    getChannel() {\n        window.managedUser = null\n        api.get(`/api/twitch/channel/${this.props.match.params.channel}`).then(r => {\n            window.managedUser = r.data\n            this.setState({loading: false})\n        }).catch(e => {\n            this.setState({loading: false, error: e.response.data})\n        })\n    }\n\n}\n\nexport default Main","\nexport function setTitle(title) {\n    document.title = `${title} | ${window.tbot.name}`\n}\n\nexport function setHeader(title) {\n    setTitle(title)\n    document.getElementById('top-title').innerHTML = title\n}\n\nexport function renderError(error) {\n    if (!error)\n        return null\n    if (error.errors)\n        return <div className=\"alert alert-danger\" role=\"alert\">\n            <div className=\"mb-2\"><b>Error:</b> {error.message}</div>\n            {error.errors.map(e => (\n                <div key={e.field}><b>{e.field}:</b> {e.message}</div>\n            ))}\n        </div>\n    return <div className=\"alert alert-danger\" role=\"alert\">\n        <div><b>Error:</b> {error.message}</div>\n    </div>\n}","export default (props) => {\n    return <div className=\"d-flex flex-column text-center\">\n        <div>\n            <div className=\"spinner-grow text-primary\" role=\"status\" style={{\n                width: '5rem',\n                height: '5rem',\n            }}>\n                <span className=\"sr-only\">Loading...</span>\n            </div>\n        </div>\n        <div className=\"mt-2\">\n            <h1>{props.text}</h1>\n        </div>\n    </div>\n}","\nexport function isAuthed() {\n\treturn tbot.twitch_user !== null;\n}\n\nexport function requireAuth() {\n\tif (!isAuthed()) {\n        let next = encodeURIComponent(\n            location.pathname + location.search\n        )\n        location.href = '/twitch/login?next='+next;\n\t\tthrow 'Not authenticated!';\n\t}\n}\n\nexport function userLevelName(level) {\n    switch (level) {\n        case 0:\n            return 'Everyone'\n            break\n        case 1:\n            return 'Sub'\n            break\n        case 2:\n            return 'VIP'\n            break\n        case 7:\n            return 'Mod'\n            break\n        case 8:\n            return 'Admin'\n            break\n        case 9:\n            return 'Broadcaster'\n            break\n        default:\n            return 'Unknown user level'\n    }\n}\n\nexport function enabledWhenName(level) {\n    switch (level) {\n        case 0:\n            return 'Always'\n            break\n        case 1:\n            return 'Online'\n            break\n        case 2:\n            return 'Offline'\n            break\n        default:\n            return 'Unknown enabled when level'\n    }\n}"],"sourceRoot":""}